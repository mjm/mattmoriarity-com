{
  "data": {
    "allMarkdownRemark": {
      "nodes": [
        {
          "excerpt": "<p>At the end of <a href=\"/observing-core-data-changes-with-combine/mvvm/\">the last post</a>, I described the way I wanted to observe <a href=\"https://developer.apple.com/documentation/coredata\">Core Data</a> changes in my app: with a stream of collection changes that I can apply to a list of view models to keep it in sync the current state of the managed object context.</p>\n<p>In this post, I’ll show how I can create a custom <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> publisher that does exactly that.</p>\n",
          "html": "<p>At the end of <a href=\"/observing-core-data-changes-with-combine/mvvm/\">the last post</a>, I described the way I wanted to observe <a href=\"https://developer.apple.com/documentation/coredata\">Core Data</a> changes in my app: with a stream of collection changes that I can apply to a list of view models to keep it in sync the current state of the managed object context.</p>\n<p>In this post, I’ll show how I can create a custom <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> publisher that does exactly that.</p>\n<!--more-->\n<blockquote>\n<p><strong>Credit</strong>: <a href=\"https://github.com/broadwaylamb\">Sergej Jaskiewicz</a> deserves a huge credit here for creating <a href=\"https://github.com/broadwaylamb/OpenCombine\">OpenCombine</a>, an open source reimplementation of Combine for apps that need to deploy to older OS versions.</p>\n<p>OpenCombine’s source code has been immensely helpful as I’ve tried to learn how Combine actually works.</p>\n</blockquote>\n<p>When I did this the first time, I started by updating <code>FetchedObjectList</code> to expose a new publisher for the changes to the object list it was tracking.\nThis was working alright, but it had a subtle bug that would have caused issues if I had been using it a little differently.</p>\n<p>The current <code>FetchedObjectList</code> fetches objects as soon as it’s created, and any subscriber after that would get the list of model objects as they were at the time when they subscribed, followed by any changes after that.\nWhen I started tracking collection changes, this got weird.</p>\n<p>For the subscription I showed above to work correctly, it needs to receive the initial list of insertions to the list.\nThis keeps the list of models consistent with the actual list of model objects.\nBut it will only receive those insertions if it’s subscribed when the <code>FetchedObjectList</code> sends the first update.\nI was getting by alright because I was always subscribing to the list right away, but clearly this model has some issues.</p>\n<p>At the same time, I was also starting to feel annoyed that I had to store the <code>FetchedObjectList</code> instance in my view models at all.\nMost publishers don’t require you to keep hanging on to the state that produced them.\nI’m already storing the subscription in my view model: that should be sufficient to keep any state my publisher needs alive.\nAs a consumer of the publisher, I shouldn’t need to worry about what that is.</p>\n<p>Both of these problems can be solved by creating a new type of <code>Publisher</code>.\nLet’s start with the API that I’ll use to create this publisher from my ViewModels:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> changesPublisher<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObject</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">for</span> fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">ManagedObjectChangesPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ManagedObjectChangesPublisher</span><span class=\"token punctuation\">(</span>\n            fetchRequest<span class=\"token punctuation\">:</span> fetchRequest<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>This is mostly a shortcut to create new instances of the publisher in a way that reads nicely to the code that’s subscribing.\nIt’s similar to the API Apple exposes to create publishers for KVO or NotificationCenter notifications.</p>\n<p>Notice that the input to the publisher is the same as what I had to pass in to <code>FetchedObjectList</code> to be able to create the fetched results controller.\nThat’s because the subscriptions for this publisher are going to need to create one too.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">ManagedObjectChangesPublisher</span><span class=\"token operator\">&lt;</span>\n    <span class=\"token builtin\">Object</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObject</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Publisher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">Output</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">CollectionDifference</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">Failure</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Error</span>\n\n    <span class=\"token keyword\">let</span> fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">let</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>fetchRequest <span class=\"token operator\">=</span> fetchRequest\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>This is mostly just boilerplate, but notice a few things.\nFirst, the typealiases: <code>Publisher</code> has two associated types, which you’ve seen me reference when defining operators.\n<code>Output</code> is the type of objects the publisher will send to subscribers, and <code>Failure</code> is the type of errors it can finish with.\n<code>Failure</code> can be <code>Never</code> for publishers that will never produce an error, and some subscribers like <code>assign</code> require the publisher to never fail.\nThis publisher will be able to produce errors, though, as you’ll see soon.</p>\n<p>Second, the <code>Publisher</code> is a <code>struct</code>, like most publishers, which means it’s a value type.\nPublishers in Combine are not usually responsible for doing the work to provide values to their subscribers.\nThey are discardable: in fact, as soon as something subscribes to this publisher, the publisher itself will go away.\nThink of publishers as recipes for how to produce values for a subscriber.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> receive<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Subscriber</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">:</span> S<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">where</span> <span class=\"token builtin\">Output</span> <span class=\"token operator\">==</span> S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Input</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Failure</span> <span class=\"token operator\">==</span> S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Failure</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> inner <span class=\"token operator\">=</span> <span class=\"token function\">Inner</span><span class=\"token punctuation\">(</span>\n        downstream<span class=\"token punctuation\">:</span> subscriber<span class=\"token punctuation\">,</span>\n        fetchRequest<span class=\"token punctuation\">:</span> fetchRequest<span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">:</span> context\n    <span class=\"token punctuation\">)</span>\n    subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">:</span> inner<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>The only method a <code>Publisher</code> needs to implement is <a href=\"https://developer.apple.com/documentation/combine/publisher/3229093-receive\"><code>receive(subscriber:)</code></a>.\nAll the other behavior and operators that a publisher exposes hangs off of that one method being implemented.</p>\n<p>This is the hook that Combine uses to tell the publisher that there’s a new interested subscriber.\nThe publisher’s job, when it receives this, is to create a new <a href=\"https://developer.apple.com/documentation/combine/subscription\">Subscription</a> object for the subscriber, and pass it back to the subscriber using <a href=\"https://developer.apple.com/documentation/combine/subscriber/3213655-receive\"><code>receive(subscription:)</code></a>.\nConventionally, Combine’s subscription classes seem to be called <code>Inner</code> and are namespaced within the type of the publisher, so I’m copying that convention here.</p>\n<p>The subscription object is the one that will keep track of state for a particular subscriber, and it will be the one responsible for sending values.\nI’m creating one by passing it the subscriber, as well as the input to the publisher that will be used to interact with Core Data.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">ManagedObjectChangesPublisher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Downstream</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Subscriber</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSObject</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Subscription</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">NSFetchedResultsControllerDelegate</span>\n        <span class=\"token keyword\">where</span> <span class=\"token builtin\">Downstream</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Input</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">CollectionDifference</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n              <span class=\"token builtin\">Downstream</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Failure</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">Error</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> downstream<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Downstream</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> fetchedResultsController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span><span class=\"token operator\">?</span>\n\n        <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n            downstream<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Downstream</span><span class=\"token punctuation\">,</span>\n            fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>downstream <span class=\"token operator\">=</span> downstream\n\n            fetchedResultsController\n                <span class=\"token operator\">=</span> <span class=\"token function\">NSFetchedResultsController</span><span class=\"token punctuation\">(</span>\n                    fetchRequest<span class=\"token punctuation\">:</span> fetchRequest<span class=\"token punctuation\">,</span>\n                    managedObjectContext<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">,</span>\n                    sectionNameKeyPath<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span>\n                    cacheName<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            fetchedResultsController<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> fetchedResultsController<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">performFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">updateDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n                downstream<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Creating a subscription for this publisher looks <em>a lot</em> like creating a <code>FetchedObjectList</code>.\nThat’s good: my goal was to try to capture that state (the fetched results controller and its delegate) in the subscription itself instead of having to track it separately.\nThis is also how I’ll prevent issues with missing messages, because:</p>\n<ul>\n<li>Each subscription will now have its own fetched results controller.</li>\n<li>That fetched results controller won’t be created or start fetching until the subscriber is already listening.</li>\n</ul>\n<p>By keeping this with the subscription, there’s no way for any subscriber to miss messages because they weren’t listening at the right time.</p>\n<p>A few other differences from <code>FetchedObjectList</code>:</p>\n<ul>\n<li>I have to store the downstream subscriber, so that I can send it new values when they’re available. It’s kind of like when I was storing the <code>updateSnapshot</code> callback, but Combine is providing a lot of extra support around it.</li>\n<li>I’m not just logging the error anymore if the fetch request fails. Instead, I’m completing the subscription with a failure, so a subscriber can know when it’s failed and explicitly handle it in some way (perhaps using the <a href=\"https://developer.apple.com/documentation/combine/publisher/3204690-catch\">catch</a> or <a href=\"https://developer.apple.com/documentation/combine/publisher/3204686-assertnofailure\">assertNoFailure</a> operator).</li>\n</ul>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> demand<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Subscribers</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Demand</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> demand<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Subscribers</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Demand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>demand <span class=\"token operator\">+</span><span class=\"token operator\">=</span> demand\n    <span class=\"token function\">fulfillDemand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Oh, this is new!\n<a href=\"https://developer.apple.com/documentation/combine/subscription/3213720-request\"><code>request(_:)</code></a> is part of the <code>Subscription</code> protocol.\nIt’s what subscribers use to signal to a publisher that they want more values.\nThis supports a feature of Combine called <a href=\"https://www.caseyliss.com/2019/6/20/under-pressure\">“backpressure,”</a> which I’m not going to go into much other than to say that my subscription is going to respect the wishes of its subscribers and only send new lists of changes when the subscriber has said they want them.\nIf I see new object changes but the subscriber isn’t ready for them, I’ll have to keep them around, ready to go, in the subscription until I get a new request.</p>\n<p>I’m keeping track of how much unfulfilled demand my subscriber has requested.\nWhen I get a new request, I add that demand to the existing demand.\n(<a href=\"https://developer.apple.com/documentation/combine/subscribers/demand\">Subscribers.Demand</a> isn’t <em>exactly</em> a number, but it does support math operations.)\nThen I call a private helper to fulfill any outstanding demand.\nWe’ll look at the implementation for that in a bit.</p>\n<p>But first, let’s look at how I’m updating the subscription’s state when the fetched results controller has new content.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">controllerDidChangeContent</span><span class=\"token punctuation\">(</span>\n    <span class=\"token number\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NSFetchRequestResult</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">updateDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> lastSentState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> currentDifferences <span class=\"token operator\">=</span> <span class=\"token builtin\">CollectionDifference</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">updateDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentDifferences\n        <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>fetchedResultsController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>fetchedObjects <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> lastSentState<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">fulfillDemand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>The fetched results controller delegate method just calls the same <code>updateDiff()</code> method that my initializer calls, and now we can see how that’s implemented.\n<code>updateDiff()</code> prepares the value that will be sent to the subscriber if they have any demand, and it does this with two pieces of state.\n<code>lastSentState</code> stores the version of <code>fetchedObjects</code> from the last time the subscriber received a message from us.\nBefore the subscriber receives any messages, this is the empty array.\n<code>currentDifferences</code> reflects the difference between the current list of fetched objects and the <code>lastSentState</code>.\nThis is the content the subscription will send in its next message to the subscriber.</p>\n<p><code>updateDiff()</code> is called whenever there might be changes to the list of fetched objects.\nIt updates the state needed to know what it would send to the subscriber, then calls <code>fulfillDemand()</code>.\nRemember this is the same helper that is called when a subscriber requests more items.\nThis is where I’ll actually try to send messages, so let’s see how that works.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">fulfillDemand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> demand <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>currentDifferences<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> newDemand <span class=\"token operator\">=</span> downstream<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>currentDifferences<span class=\"token punctuation\">)</span>\n\n        lastSentState <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>fetchedResultsController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>fetchedObjects <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        currentDifferences <span class=\"token operator\">=</span> lastSentState<span class=\"token punctuation\">.</span><span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> lastSentState<span class=\"token punctuation\">)</span>\n\n        demand <span class=\"token operator\">+</span><span class=\"token operator\">=</span> newDemand\n        demand <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>This is where the magic happens.\nThe first thing <code>fulfillDemand()</code> does is check to see if there’s anything that needs to be done.\nRemember that <code>demand</code> reflects the outstanding demand: demand that the subscription hasn’t fulfilled yet.\nSo if it reaches zero, then the subscriber doesn’t want any more elements and there’s nothing to do.</p>\n<p>If this happens, I’m not going to alter the state in the subscription at all.\nThe <code>lastSentState</code> will stay what it was the last time a message was sent, and if I get more changes from the fetched results controller, <code>updateDiff()</code> will recompute the current diff against that old state.\nThis has the effect of letting changes “pile up” until the subscriber wants them, at which point it gets a collection with every change that happened since it was last notified, even if those came from multiple notifications.\nI think it’s very cool to wrap this behavior in the subscription, so it’s transparent to subscribers.</p>\n<p>I’m also not going to send a message if the diff is empty.\nThere’s no point in notifying subscribers when there are no changes, so in this case I’ll avoid sending a message until there’s something interesting.</p>\n<p>Assuming the subscriber wants more messages and there’s something to send, I go ahead and send <code>currentDifferences</code> to the downstream subscriber.\nWhen I do, I may get more demand, which I’ll add to the outstanding demand that I’m tracking.\nAt this point, I’ll reset <code>lastSentState</code> to be the current state of the fetched objects, so that future diffs don’t include changes that were already sent to the subscriber.\nI’ll then reset <code>currentDifferences</code> to an empty collection by diffing <code>lastSentState</code> against itself.\nAnd finally, I adjust demand by reducing it by one (for the message I just sent) and adding any new demand the subscriber requested.</p>\n<p>That’s everything that’s needed to get messages sending for changes the way I wanted.\nThere’s one last requirement to finish implementing the <code>Subscription</code>, because <code>Subscription</code> extends <code>Cancellable</code>.\nI need to define what happens when the subscription is canceled by the subscriber.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fetchedResultsController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span>\n    fetchedResultsController <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Honestly, I’m not actually sure if either of these are necessary to properly clean up.\nI haven’t done a deep-dive on the retain/release patterns for Combine subscriptions, so it’s possible that the fetched results controller might get cleaned up automatically if the subscription gets deallocated shortly after being canceled.\nUntil I know more, I’m leaving them around just to be sure.\nIn particular, clearing the fetched results controller delegate will prevent getting more notifications for changes after cancellation.</p>\n<p>That’s it: a custom Publisher that can be used with Combine to track changes to a fetch request.\nYou can get <a href=\"https://gist.github.com/mjm/750b20e1dfd5b1abc82b8295b54b3c74\">the complete publisher code as a gist</a>.\nI’m considering expanding it a bit and publishing it as a Swift package.</p>\n<p>Now let’s see what it looks like to use it in our view model.\nRemember that I left <code>itemChanges</code> as an unimplemented property for the publisher of the model changes, but now I can really implement it:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Make an easy accessor to grab the default view-layer (main thread) context</span>\n    <span class=\"token comment\">// for your app.</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> view<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemsViewModel</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span>\n    @<span class=\"token builtin\">Published</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> itemViewModels<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">ToDoItemCellViewModel</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">var</span> itemChanges<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">CollectionDifference</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">changesPublisher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">allItemsFetchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span> <span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// replace error with an empty, completed stream</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context\n\n        <span class=\"token comment\">// this is the same as before</span>\n        $itemViewModels<span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>itemChanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> existingModels<span class=\"token punctuation\">,</span> changes <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">var</span> newModels <span class=\"token operator\">=</span> existingModels\n            <span class=\"token keyword\">for</span> change <span class=\"token keyword\">in</span> changes <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">switch</span> change <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> offset<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    newModels<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> offset<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> toDoItem<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token function\">ToDoItemCellViewModel</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> toDoItem<span class=\"token punctuation\">)</span>\n                    newModels<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>transformed<span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> offset<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> newModels\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> \\<span class=\"token punctuation\">.</span>itemViewModels<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>How easy is that!?\nThere’s no extra state for the view model to keep around to track these changes, because that’s all tucked away in the subscription.\nI can just ask the managed object context to publish the changes, and then use those in my pipelines like any other data that Combine already supports.\nUsing a <code>Publisher</code> also means that all existing operators exposed as extensions on <code>Publisher</code> (<code>map</code>, <code>filter</code>, <code>combineLatest</code>, <code>zip</code>, etc.) are all available.</p>\n<p>Speaking of which, that initializer is bothering me.\nI feel like it’s not very obvious what is happening there.\nOperating on streams of this shape and transforming them in this way (creating view models from object changes) is going to be a common pattern in my app, so it should be easy to do without boilerplate and it should be easy to recognize when looking at the code.\nI think I can write an operator to abstract and name this transformation, and then use that operator in my view model instead.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Publisher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> applyingChanges<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Changes</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Publisher</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ChangeItem</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        <span class=\"token number\">_</span> changes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Changes</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">_</span> transform<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">ChangeItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Output</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Output</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Failure</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">where</span> <span class=\"token builtin\">Output</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">RangeReplaceableCollection</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">Output</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Index</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">Changes</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Output</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">CollectionDifference</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ChangeItem</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">Changes</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Failure</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">Failure</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>changes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> existing<span class=\"token punctuation\">,</span> changes <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Output</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">var</span> objects <span class=\"token operator\">=</span> existing\n            <span class=\"token keyword\">for</span> change <span class=\"token keyword\">in</span> changes <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">switch</span> change <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> offset<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    objects<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> offset<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> obj<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">let</span> transformed <span class=\"token operator\">=</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n                    objects<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>transformed<span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> offset<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> objects\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p><code>applyingChanges(_:_:)</code> is shaped a lot like <code>zip</code> or <code>combineLatest</code>, though it’s a much more specific way of combining two publishers.\nIt’s available on publishers of collections that can be changed by integer indices (like arrays of view models, for instance).\nIt expects to be passed another publisher that outputs collections of changes to another type of object (like model objects) as well as a transform function that can convert between the types.\nIt produces a new publisher with the same output and failure types as the receiver, and this will publish the results of applying the changes.</p>\n<p>This logic is very generic: while I’m intending to use it for model objects and view models, it could be used for any situation where you want to maintain a parallel collection in response to a stream of changes.</p>\n<p>With this operator, the view model’s subscription is much easier to write and understand:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemsViewModel</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span>\n    @<span class=\"token builtin\">Published</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> itemViewModels<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">ToDoItemCellViewModel</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">var</span> itemChanges<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">CollectionDifference</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">changesPublisher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">allItemsFetchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span> <span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context\n\n        $itemViewModels<span class=\"token punctuation\">.</span><span class=\"token function\">applyingChanges</span><span class=\"token punctuation\">(</span>itemChanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> toDoItem <span class=\"token keyword\">in</span>\n            <span class=\"token function\">ToDoItemCellViewModel</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> toDoItem<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> \\<span class=\"token punctuation\">.</span>itemViewModels<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Perfect! Wiring up a new view model is now <strong>trivial</strong>, and this mechanism encourages me to split responsibilities into child view models where appropriate, because now it’s super easy to do.</p>\n<hr>\n<p>I hope this series has demonstrated some of the ways you can use Combine in your UIKit apps to improve the flow of data and the architecture of the app:</p>\n<ul>\n<li>Use subjects or <code>@Published</code> properties to get data from imperative sources into reactive pipelines.</li>\n<li>Express common data transformations using custom operators.</li>\n<li>Separate concerns and simplify view controllers by binding UI to view models.</li>\n<li>Consider creating a custom <code>Publisher</code> to introduce new sources of data into your pipelines with complete control and strong encapsulation.</li>\n</ul>",
          "fields": {
            "slug": "/observing-core-data-changes-with-combine/custom-publisher/"
          },
          "frontmatter": {
            "date": "2019-11-08T23:00:00.000Z",
            "photos": null,
            "pinned": null,
            "syndication": [
              "https://twitter.com/mjmoriarity/status/1193962561634353152"
            ],
            "templateKey": "blog-post",
            "title": "Observing Core Data Changes with a Custom Combine Publisher",
            "path": null
          }
        },
        {
          "excerpt": "<p>In the <a href=\"/observing-core-data-changes-with-combine/creating-pipelines/\">previous post</a>, I ended up with a <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> publisher for the snapshots of data that my table view displays, so my table view was powered by a data pipeline.\nThis pipeline lives within my view controller class, but I actually think Combine really shines when you start using it to unwind the <a href=\"http://khanlou.com/2015/12/massive-view-controller/\">Massive View Controller</a> problem that is endemic to UIKit.</p>\n",
          "html": "<p>In the <a href=\"/observing-core-data-changes-with-combine/creating-pipelines/\">previous post</a>, I ended up with a <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> publisher for the snapshots of data that my table view displays, so my table view was powered by a data pipeline.\nThis pipeline lives within my view controller class, but I actually think Combine really shines when you start using it to unwind the <a href=\"http://khanlou.com/2015/12/massive-view-controller/\">Massive View Controller</a> problem that is endemic to UIKit.</p>\n<!--more-->\n<p><code>UIViewController</code>s tend to have a lot of responsibilities, and while they do have “controller” in their name, from an MVC perspective they are inherently stuck interacting with view-layer concerns just by how UIKit is structured.\nIt’s best to let them keep those responsibilities and find ways to extract the logic that controls the flow of data through your app into another place.\nI think the <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\">model-view-viewmodel</a> (MVVM) architecture does this well with the concept of ViewModels, especially when using Combine.</p>\n<p>Briefly, a view model is a sort of translation layer between the domain model of the app (the <a href=\"https://developer.apple.com/documentation/coredata\">Core Data</a> objects and methods in this case) and the view layer that displays UI to the user.\nA view model will expose information about the model and about the state of the app in a way that is useful to the view.\nThis allows the view to not concern itself with logic about app data and app state: it just presents what the view model exposes, and tells the view model when the user does things that need to affect app state.</p>\n<p>The way I’ve been implementing it, each view controller has a corresponding view model that it owns and binds to.\nUsing Combine, the view model can expose publishers for data that is useful to the view, and the view controller can subscribe to those publishers to keep its UI up-to-date.</p>\n<blockquote>\n<p><strong>Credit</strong>: <a href=\"https://github.com/mcichecki\">Michał Cichecki</a> for publishing <a href=\"https://github.com/mcichecki/Combine-MVVM\">a sample app</a> showing how you might use Combine, UIKit, and MVVM together. It inspired to me to explore this path within my own app.</p>\n</blockquote>\n<p>Splitting things up like this in my current example might look like this:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemsViewModel</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> itemsList<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FetchedObjectList</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        itemsList <span class=\"token operator\">=</span> <span class=\"token function\">FetchedObjectList</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">Snapshot</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">NSDiffableDataSourceSnapshot</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">var</span> snapshot<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Snapshot</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        itemsList<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> toDoItems <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">var</span> snapshot <span class=\"token operator\">=</span> <span class=\"token function\">Snapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendSections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendItems</span><span class=\"token punctuation\">(</span>toDoItems<span class=\"token punctuation\">,</span> toSection<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> snapshot\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemsViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableViewController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> viewModel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItemsViewModel</span>\n\n    <span class=\"token comment\">// I encourage you to make a superclass for these rather than declare them</span>\n    <span class=\"token comment\">// in every view controller.</span>\n    <span class=\"token keyword\">var</span> cancellables <span class=\"token operator\">=</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">AnyCancellable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token builtin\">Published</span> <span class=\"token keyword\">var</span> animate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token comment\">// Create the view model when loading the controller from the storyboard</span>\n    <span class=\"token keyword\">required</span> <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>coder<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSCoder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ToDoItemsViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>coder<span class=\"token punctuation\">:</span> coder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// ...create the data source...</span>\n\n        viewModel<span class=\"token punctuation\">.</span>snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> dataSource<span class=\"token punctuation\">,</span> animate<span class=\"token punctuation\">:</span> $animate<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// ...more subscriptions...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>The rewards for this separation get bigger as the complexity of the app grows.\nOne thing I want to point out is that the view model is extremely testable.\nThe publishers don’t care what is subscribed to them, so you can bind your view model to a fake view class and test the effects of different changes without creating any UI at all.</p>\n<p>View models are also easier to nest than view controllers.\nThe cells for my to-do items are likely complex enough to deserve their own view model class: <code>ToDoItemCellViewModel</code>.\nI’d like to have an instance of this class for each cell in my table.\nIt will expose publishers and actions for a specific to-do item, and the <code>UITableViewCell</code> subclass will bind to it.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemCellViewModel</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItem</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> item\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        item<span class=\"token punctuation\">.</span><span class=\"token function\">publisher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> \\<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> isChecked<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        item<span class=\"token punctuation\">.</span><span class=\"token function\">publisher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> \\<span class=\"token punctuation\">.</span>isChecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">toggleChecked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        item<span class=\"token punctuation\">.</span>isChecked<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemTableViewCell</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableViewCell</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> cancellables<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">AnyCancellable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> viewModel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItemCellViewModel</span><span class=\"token operator\">?</span>\n    \n    <span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> textLabel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UILabel</span><span class=\"token operator\">!</span>\n    <span class=\"token atrule\">@IBOutlet</span> <span class=\"token keyword\">var</span> checkedButton<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIButton</span><span class=\"token operator\">!</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>to viewModel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItemCellViewModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>viewModel <span class=\"token operator\">=</span> viewModel\n\n        viewModel<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> \\<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> textLabel<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n\n        viewModel<span class=\"token punctuation\">.</span>isChecked\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> checked <span class=\"token keyword\">in</span> checked <span class=\"token operator\">?</span> <span class=\"token string\">\"Checkbox_Checked\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Checkbox\"</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> name <span class=\"token keyword\">in</span> <span class=\"token function\">UIImage</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span>sink <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>checkedButton<span class=\"token punctuation\">]</span> image <span class=\"token keyword\">in</span>\n                checkedButton<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">setImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function\">toggleChecked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        viewModel<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleChecked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">prepareForReuse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareForReuse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        cancellables<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Awesome, but how do I actually keep track of these view models and wire them up to the cells?\nI think the easiest way to do this is to use the cell view models themselves as the items in your diffable data source snapshots.\nIt makes it easy for your view controller to get the model for an index path, and you don’t have to do extra bookkeeping to map between IDs or model objects and the view model instances.</p>\n<p>But if I do that, I have a new problem: how do I keep a consistent list of view models in response to changes in my Core Data objects?\nI’d like to avoid recreating cell view models unnecessarily: ideally I would only create a view model the first time a particular to-do item appeared in the list, and then I would keep reusing that view model as long as it was there.</p>\n<p>It turns out that a stream of lists is not really the right model for this.\nInstead, what I’d really like is a stream where each item is a collection of changes to the list of objects.\nWith this, I can observe when to-do items are added and removed, and I can add or remove cell view models as needed from an array that I maintain in the parent view model.</p>\n<p>Before I create a publisher to provide this to me, let’s see what it would look like to use a hypothetical one.\nI’m taking advantage of some new APIs in the Swift 5.1 standard library to support <a href=\"https://developer.apple.com/documentation/swift/bidirectionalcollection/3200721-difference\">diffing two collections</a> and returning a <a href=\"https://developer.apple.com/documentation/swift/collectiondifference\">collection of the differences</a> between them.</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemsViewModel</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token builtin\">Published</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> itemViewModels<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">ToDoItemCellViewModel</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">var</span> itemChanges<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">CollectionDifference</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        $itemViewModels<span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>itemChanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> existingModels<span class=\"token punctuation\">,</span> changes <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">var</span> newModels <span class=\"token operator\">=</span> existingModels\n            <span class=\"token keyword\">for</span> change <span class=\"token keyword\">in</span> changes <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">switch</span> change <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> offset<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    newModels<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> offset<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> toDoItem<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token function\">ToDoItemCellViewModel</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> toDoItem<span class=\"token punctuation\">)</span>\n                    newModels<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>transformed<span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> offset<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> newModels\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> \\<span class=\"token punctuation\">.</span>itemViewModels<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>To keep the list of view models up-to-date, I start with an empty list of them in a <code>@Published</code> property.\nI use <a href=\"https://developer.apple.com/documentation/combine/publisher/3333685-zip\">zip</a> with a transform closure to create a new publisher that combines the current list of view models with the next list of to-do item changes to produce a new list of view models.\nI use <code>assign</code> to store this new list of view models back into my published property.\nThis should cause it to publish a new value, which will then get combined with the next list of changes from <code>itemChanges</code> and keep the cycle going.</p>\n<p>To make it more concrete, let’s look at an example of how things would flow through these streams:</p>\n<ol>\n<li><code>$itemViewModels</code> receives a subscription and publishes its initial value, the empty array.\nFor now, nothing happens in our zipped publisher, because <code>itemChanges</code> hasn’t published a value.</li>\n<li><code>itemChanges</code> receives a subscription and publishes an initial list of collection changes to populate the list of items from an empty state.</li>\n<li>\n<p><code>zip</code> pairs these two values and calls the transformer.\nIt sees a bunch of <code>.insert</code>s in the list of changes and creates view models for each to-do item that was inserted.</p>\n<p><code>zip</code> looks kind of like <code>combineLatest</code> and has a similar signature, but it works differently.\n<code>zip</code> is named that because it works kind of like a zipper: it pairs up elements from two streams, one-by-one.\nIf one stream publishes a value before the other has one ready to go, it will wait and publish nothing until the other stream has something to pair with.</p>\n<p>I need that here, because I never want to replay a set of changes onto a list of view models that has already been updated.</p>\n</li>\n<li>This new list of view models is published and assigned to <code>itemViewModels</code>.\nThis list is published as a new value on <code>$itemViewModels</code>, and the <code>zip</code> waits for a new list of changes from <code>itemChanges</code>.</li>\n<li>Now, say the user removes an item from the list.\nWhen they do, <code>itemChanges</code> will publish a list with a single <code>.remove</code> change.</li>\n<li>The <code>zip</code> will now publish the pair of current view models and this new change.\nThe transformer will remove the corresponding view model from the list and publish the new list.</li>\n<li>That new list gets assigned back to <code>itemViewModels</code>, and the cycle continues from (4) for any subsequent insertions and removals.</li>\n</ol>\n<p>So now I’ve shown that if I can get a publisher to give me a stream of changes to my list of model objects, I can keep a consistent list of view models for them.\nBut currently, that publisher doesn’t exist.\nThankfully, nothing is stopping me from writing one myself, so in <a href=\"/observing-core-data-changes-with-combine/custom-publisher/\">the final part of this series</a>, that’s exactly what I’ll do.</p>",
          "fields": {
            "slug": "/observing-core-data-changes-with-combine/mvvm/"
          },
          "frontmatter": {
            "date": "2019-11-08T22:00:00.000Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Adopting MVVM with Combine and Core Data",
            "path": null
          }
        },
        {
          "excerpt": "<p>In <a href=\"/observing-core-data-changes-with-combine/getting-started/\">the last post</a>, I adapted my existing observation of <a href=\"https://developer.apple.com/documentation/coredata\">Core Data</a> objects to use <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> by replacing callbacks with publishers and subscriptions.\nBut Combine can do a lot more than just make your callbacks harder to use!\nIt’s designed to let you build data pipelines, where different parts of your app can produce data that can be consumed and transformed in interesting ways,and decoupled ways by other parts.\nIf I really think about what’s happening in my app, there is a flow of data from Core Data to the fetched results controller to my view controller and finally to the diffable data source.\nI’d really like to model that data flow in Combine in a declarative way.</p>\n",
          "html": "<p>In <a href=\"/observing-core-data-changes-with-combine/getting-started/\">the last post</a>, I adapted my existing observation of <a href=\"https://developer.apple.com/documentation/coredata\">Core Data</a> objects to use <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> by replacing callbacks with publishers and subscriptions.\nBut Combine can do a lot more than just make your callbacks harder to use!\nIt’s designed to let you build data pipelines, where different parts of your app can produce data that can be consumed and transformed in interesting ways,and decoupled ways by other parts.\nIf I really think about what’s happening in my app, there is a flow of data from Core Data to the fetched results controller to my view controller and finally to the diffable data source.\nI’d really like to model that data flow in Combine in a declarative way.</p>\n<!--more-->\n<p>The API of <code>FetchedObjectList</code> doesn’t currently lend itself to that, largely due to its legacy from when it used callbacks.\nWhen the list of objects changes, it’s letting its subscribers know that it happened, but it’s not telling them what the new list of objects actually is.\nMy view controllers still have to ask for the list again when they go to build the snapshot.\nThis is still very imperative, but I can fix that by changing it to publish some values!</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchedObjectList</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObject</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...perform the initial fetch...</span>\n\n        <span class=\"token function\">sendCurrentObjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> onObjectsChange <span class=\"token operator\">=</span> <span class=\"token builtin\">CurrentValueSubject</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> objects<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> onObjectsChange<span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">sendCurrentObjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        onObjectsChange<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fetchedResultsController<span class=\"token punctuation\">.</span>fetchedObjects <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">FetchedObjectList</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsControllerDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">controllerDidChangeContent</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NSFetchRequestResult</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sendCurrentObjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>This is a pretty small change, but it’s going to have a cascading impact on what I can do with Combine.\nIt’s worth noting that in addition to now passing the list of objects to subscribers, I’m also using a <a href=\"https://developer.apple.com/documentation/combine/currentvaluesubject\">CurrentValueSubject</a> instead of a <code>PassthroughSubject</code>.\nIts name probably gives a clue to the difference: <code>CurrentValueSubject</code> remembers the last value it was sent, and immediately sends that value to new subscribers.\nI’m using this to ensure that when I connect my UI to this publisher, it immediately gets updated based on the current state and I don’t risk missing a message and presenting empty lists.</p>\n<p>I also need to be sure to send a first message after I get the fetched results controller to load its initial data.\nThis is because <a href=\"https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/1622290-controllerdidchangecontent\"><code>controllerDidChangeContent(_:)</code></a> is only called for later changes to the content: it doesn’t get called for the initial fetch.\nI didn’t realize this at first and ended up with a bunch of empty lists in my app.\nSince code that uses <code>FetchedObjectList</code> isn’t going to ask it for the objects imperatively anymore, it’s important the they get sent to subscribers and become part of the data pipeline.</p>\n<p>With this change in place, it’s now possible to build my snapshots directly as part of a Combine pipeline, without having to ask something else for the current data:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">let</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>dataSource\n    snapshot<span class=\"token punctuation\">.</span>sink <span class=\"token punctuation\">{</span> snapshot <span class=\"token keyword\">in</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">typealias</span> <span class=\"token builtin\">Snapshot</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">NSDiffableDataSourceSnapshot</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">var</span> snapshot<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Snapshot</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    toDoItemsList<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> toDoItems <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">var</span> snapshot <span class=\"token operator\">=</span> <span class=\"token function\">Snapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendSections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendItems</span><span class=\"token punctuation\">(</span>toDoItems<span class=\"token punctuation\">,</span> toSection<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> snapshot\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Look at that, I’ve created a pipeline!\nThe fetched object list publishes a stream of lists of to-do items, and my view controller transforms that stream into a stream of snapshots using the <code>map</code> operator.\nThis creates a new publisher which I called <code>snapshot</code> and exposed as a computed property.\nNow my subscription doesn’t need to think about where the snapshots come from: it just says “I want a snapshot” and it will be notified anytime the snapshot needs to change.</p>\n<p>I see a pattern here that I think is going to be pretty common.\nAlmost all of my view controllers are going to want to publish a snapshot and apply it to a data source.\nI’d like it to be easier to create that subscription in my view controllers.</p>\n<p>Combine includes three built-in ways to create subscriptions to publishers:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/combine/publisher/3362666-sink\">sink</a>: You’ve already seen this one: you provide a closure that is called every time the publisher has a new value. You can also <a href=\"https://developer.apple.com/documentation/combine/publisher/3343978-sink\">provide a second closure</a> to handle the completion of the stream, but so far I haven’t needed that in this example since these publishers never complete.</li>\n<li><a href=\"https://developer.apple.com/documentation/combine/publisher/3235801-assign\">assign</a>: You provide a key path and a root object, and the latest value the publisher sent will be assigned to that key path on the object. This is useful for updating UI components with values from publishers or for keeping state around for when imperative code asks for it later.</li>\n<li><a href=\"https://developer.apple.com/documentation/combine/publisher/3204757-subscribe\">subscribe</a>: You provide a subject which is sent all of the events the publisher receives. Not as common as the other too, but it does have uses.</li>\n</ul>\n<p>That’s not a huge list of ways to subscribe, but they do cover the most common use cases.\nThere’s nothing special about them, though: we can define our own operators to create subscriptions in other useful ways.\nGenerally, these can all be expressed in terms of <code>sink</code> since it is so general-purpose.</p>\n<p>I’ll define a new <code>apply</code> operator that creates a subscription that applies the latest snapshot in a stream to a diffable data source:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Publisher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> apply<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Item</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>to dataSource<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableViewDiffableDataSource</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Item</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AnyCancellable</span>\n    <span class=\"token keyword\">where</span> <span class=\"token builtin\">Output</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">NSDiffableDataSourceSnapshot</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Item</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Failure</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">Never</span>\n    <span class=\"token punctuation\">{</span>\n        sink <span class=\"token punctuation\">{</span> snapshot <span class=\"token keyword\">in</span>\n            dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Oh look, that’s almost exactly what I was doing in my view controller, but with extra generics.\nThe <code>where</code> clauses here just restrict this to only apply to streams of snapshots that also can’t fail.\nThen the generics restrict it so the snapshot can only apply to a data source for the same types of sections and items.</p>\n<p>With this operator, I can rewrite the subscription code in my <code>viewDidLoad</code> to be:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I think that reads incredibly nicely.\nBut one thing I’ve lost here is control over whether changes animate.\nPreviously, I avoided animating the first application of the snapshot, because it looks weird for rows to animate in when the view first appears.</p>\n<p>One way to solve this is to make a publisher for whether changes should animate.\nThe easiest way to do this is to use the <a href=\"https://developer.apple.com/documentation/combine/published\"><code>@Published</code></a> property wrapper on a property on the view controller.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@<span class=\"token builtin\">Published</span> <span class=\"token keyword\">var</span> animate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidAppear</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> animated<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidAppear</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">)</span>\n\n    animate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now I’ll have an <code>$animate</code> property available that is a publisher for changes to the <code>animate</code> property.\nI can use <code>$animate</code> in my pipelines to know whether UI changes affected by them should be animated.\nLet me modify the <code>apply</code> subscriber to take in an additional publisher to control animations:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Publisher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> apply<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Item</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Animate</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Publisher</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        to dataSource<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableViewDiffableDataSource</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Item</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        animate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Animate</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span>\n    <span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">AnyCancellable</span>\n    <span class=\"token keyword\">where</span>\n        <span class=\"token builtin\">Output</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">NSDiffableDataSourceSnapshot</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Item</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">Animate</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Output</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">Failure</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">Never</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">Animate</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Failure</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">Never</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Animate and Just are different types, so we have to type-erase to be able to use</span>\n        <span class=\"token comment\">// either one for the same parameter.</span>\n        <span class=\"token keyword\">let</span> animate <span class=\"token operator\">=</span> animate<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token function\">Just</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>animate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sink <span class=\"token punctuation\">{</span> snapshot<span class=\"token punctuation\">,</span> animate <span class=\"token keyword\">in</span>\n            dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">,</span> animatingDifferences<span class=\"token punctuation\">:</span> animate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p><a href=\"https://developer.apple.com/documentation/combine/publisher/3333677-combinelatest\">combineLatest</a> publishes a tuple with the latest values of a group of publishers when any of them changes.\nSo when either the snapshot or the animate flag changes, the data source will get updated.\nTechnically, I only really care about when the snapshot changes, but as far as I can tell Combine doesn’t inlude a built-in operator that will let me have the latest <code>animate</code> value without republishing when it changes.\nSo far it hasn’t been a problem, but if it becomes one, it should be possible to create that operator.</p>\n<p>In my view controller, I can use my new <code>apply</code> subscriber with <code>$animate</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> dataSource<span class=\"token punctuation\">,</span> animate<span class=\"token punctuation\">:</span> $animate<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now my table view updates will not animate until the view has appeared, and my pipeline is extremely declarative.</p>\n<p>You may have noticed that I seem to have totally forgotten about the <code>objectDidChange</code> publisher for updates to individual objects.\nThis was about the point where I discovered that using KVO with Combine is a much better way to keep individual cells up-to-date than watching for updates at the controller level.\nWhen creating a cell, instead of setting a bunch of UI control properties to populate it, I will instead use <code>publisher(for:)</code> with <code>assign</code> to create subscriptions that will update the UI every time the properties of my Core Data objects changes.\nDoing this means I don’t need <code>objectDidChange</code> anymore and I can get rid of it.</p>\n<p>So now I’ve got a nice little pipeline, but it’s all living in my view controller.\nIn <a href=\"/observing-core-data-changes-with-combine/mvvm/\">part three</a>, I’ll rearchitect my app to use MVVM to separate the logic for what data my table should contain from the code that actually displays it.\nIf you’ve been put off by more complex iOS app architectures like MVP or MVVM before, please stick with me.\nCombine is going to make this kind of architecture feel practical and helpful instead of burdensome.</p>",
          "fields": {
            "slug": "/observing-core-data-changes-with-combine/creating-pipelines/"
          },
          "frontmatter": {
            "date": "2019-11-08T21:00:00.000Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Creating Pipelines with Combine and Core Data",
            "path": null
          }
        },
        {
          "excerpt": "<p>Because Apple released <a href=\"https://developer.apple.com/documentation/swiftui\">SwiftUI</a> and <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> together, you could be forgiven for ignoring Combine if you’re only using UIKit in your app.\nI certainly ignored it for a while, but I think Combine provides a huge opportunity to use better app architectures in your iOS app without feeling like UIKit is fighting you the entire time.</p>\n<p>I want to demonstrate a progression I went through in my app for observing data changes from <a href=\"https://developer.apple.com/documentation/coredata\">Core Data</a>.\nI think that this shows the power that’s available in Combine if you’re willing to embrace it.</p>\n",
          "html": "<p>Because Apple released <a href=\"https://developer.apple.com/documentation/swiftui\">SwiftUI</a> and <a href=\"https://developer.apple.com/documentation/combine\">Combine</a> together, you could be forgiven for ignoring Combine if you’re only using UIKit in your app.\nI certainly ignored it for a while, but I think Combine provides a huge opportunity to use better app architectures in your iOS app without feeling like UIKit is fighting you the entire time.</p>\n<p>I want to demonstrate a progression I went through in my app for observing data changes from <a href=\"https://developer.apple.com/documentation/coredata\">Core Data</a>.\nI think that this shows the power that’s available in Combine if you’re willing to embrace it.</p>\n<!--more-->\n<p>Core Data includes a very useful class called <a href=\"https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller\">NSFetchedResultsController</a>.\nYou give it a fetch request and a delegate, and it will let the delegate know when there are changes to objects matched by that fetch request.\nIt’s been around for years now, and was originally designed around <code>UITableView</code>’s API, so that you could accurately tell a table view which rows had been inserted or deleted.\nNow that I’m using <a href=\"https://developer.apple.com/documentation/uikit/uitableviewdiffabledatasource\">diffable data sources</a>, a lot of the functionality isn’t as useful to me anymore, but I still use it to know when to update my data source snapshots.</p>\n<p>Initially, I was using a fetched results controller directly in my view controllers:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemsViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableViewController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token builtin\">Section</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Hashable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> items\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> fetchedResultsController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span><span class=\"token operator\">!</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// not shown: create the diffable data source</span>\n\n        fetchedResultsController\n            <span class=\"token operator\">=</span> <span class=\"token function\">NSFetchedResultsController</span><span class=\"token punctuation\">(</span>\n                fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                managedObjectContext<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">,</span>\n                sectionNameKeyPath<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span>\n                cacheName<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span>\n            <span class=\"token punctuation\">)</span>\n\n        fetchedResultsController<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> fetchedResultsController<span class=\"token punctuation\">.</span><span class=\"token function\">performFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not fetch to-do items: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> snapshot <span class=\"token operator\">=</span> <span class=\"token builtin\">NSDiffableDataSourceSnapshot</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendSections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendItems</span><span class=\"token punctuation\">(</span>fetchedResultsController<span class=\"token punctuation\">.</span>fetchedObjects <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> toSection<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">,</span> animatingDifferences<span class=\"token punctuation\">:</span> animated<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">ToDoItemsViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsControllerDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">controllerDidChangeContent</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NSFetchRequestResult</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>This is super useful!\nNow my snapshot gets updated any time rows are added or removed from the query results, so my app’s UI stays consistent as the user makes changes.\nI didn’t show it, but I also used the <a href=\"https://developer.apple.com/documentation/coredata/nsfetchedresultscontrollerdelegate/1622296-controller\"><code>controller(_:didChange:at:for:newIndexPath:)</code></a> delegate method to know when to update the content in existing cells.</p>\n<p>Once I’d done this for a few different view controllers, the boilerplate got to me and I created a new abstraction called <code>FetchedObjectList</code>:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchedObjectList</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObject</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fetchedResultsController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">let</span> updateSnapshot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span>\n    <span class=\"token keyword\">let</span> updateCell<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        managedObjectContext<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span><span class=\"token punctuation\">,</span>\n        updateSnapshot<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">,</span>\n        updateCell<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fetchedResultsController <span class=\"token operator\">=</span>\n            <span class=\"token function\">NSFetchedResultsController</span><span class=\"token punctuation\">(</span>fetchRequest<span class=\"token punctuation\">:</span> fetchRequest<span class=\"token punctuation\">,</span>\n                                       managedObjectContext<span class=\"token punctuation\">:</span> managedObjectContext<span class=\"token punctuation\">,</span>\n                                       sectionNameKeyPath<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span>\n                                       cacheName<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>updateSnapshot <span class=\"token operator\">=</span> updateSnapshot\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>updateCell <span class=\"token operator\">=</span> updateCell\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        fetchedResultsController<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> fetchedResultsController<span class=\"token punctuation\">.</span><span class=\"token function\">performFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching objects: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> objects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        fetchedResultsController<span class=\"token punctuation\">.</span>fetchedObjects <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">FetchedObjectList</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsControllerDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">controllerDidChangeContent</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NSFetchRequestResult</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NSFetchRequestResult</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> didChange anObject<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">,</span> at indexPath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">IndexPath</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsChangeType</span><span class=\"token punctuation\">,</span> newIndexPath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">IndexPath</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">updateCell</span><span class=\"token punctuation\">(</span>anObject <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">ObjectType</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>All this object does is keep track of the current list of objects and listen for the fetched results controller delegate methods, which it then notifies the view controller about.\nUsing it from the view controller looks like this:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoItemsViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UITableViewController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> toDoItemsList<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FetchedObjectList</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span><span class=\"token operator\">!</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// not shown: create the diffable data source</span>\n\n        toDoItemsList\n            <span class=\"token operator\">=</span> <span class=\"token function\">FetchedObjectList</span><span class=\"token punctuation\">(</span>\n                fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                managedObjectContext<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">,</span>\n                updateSnapshot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n                    <span class=\"token keyword\">self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                updateCell<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> toDoItem <span class=\"token keyword\">in</span>\n                    <span class=\"token comment\">// look up the item's cell and update UI components from the new state</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> snapshot <span class=\"token operator\">=</span> <span class=\"token builtin\">NSDiffableDataSourceSnapshot</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Section</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendSections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">appendItems</span><span class=\"token punctuation\">(</span>fetchedResultsController<span class=\"token punctuation\">.</span>fetchedObjects <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> toSection<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">,</span> animatingDifferences<span class=\"token punctuation\">:</span> animated<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>This cuts down the boilerplate quite a bit, especially when repeating this pattern all over the app.</p>\n<blockquote>\n<p>I’m going to give you a quick spoiler: <code>FetchedObjectList</code> hangs around for a lot of this story, but it definitely dies in the end.</p>\n</blockquote>\n<p>Currently, my app is using Combine nearly everywhere it’s possible, but I didn’t start there.\nThe adoption was gradual.\nAt some point I started thinking about whether I could power my Core Data changes from it, so I tweaked <code>FetchedObjectList</code> to stop taking callbacks and instead expose publishers for those notifications:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchedObjectList</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObject</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fetchedResultsController<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> onContentChange <span class=\"token operator\">=</span> <span class=\"token builtin\">PassthroughSubject</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> onObjectChange <span class=\"token operator\">=</span> <span class=\"token builtin\">PassthroughSubject</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n        fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchRequest</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        managedObjectContext<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSManagedObjectContext</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fetchedResultsController <span class=\"token operator\">=</span>\n            <span class=\"token function\">NSFetchedResultsController</span><span class=\"token punctuation\">(</span>fetchRequest<span class=\"token punctuation\">:</span> fetchRequest<span class=\"token punctuation\">,</span>\n                                       managedObjectContext<span class=\"token punctuation\">:</span> managedObjectContext<span class=\"token punctuation\">,</span>\n                                       sectionNameKeyPath<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span>\n                                       cacheName<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        fetchedResultsController<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> fetchedResultsController<span class=\"token punctuation\">.</span><span class=\"token function\">performFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching objects: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> objects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        fetchedResultsController<span class=\"token punctuation\">.</span>fetchedObjects <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> contentDidChange<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        onContentChange<span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> objectDidChange<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyPublisher</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        onObjectChange<span class=\"token punctuation\">.</span><span class=\"token function\">eraseToAnyPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">FetchedObjectList</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsControllerDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">controllerDidChangeContent</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NSFetchRequestResult</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        onContentChange<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> controller<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsController</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">NSFetchRequestResult</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> didChange anObject<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">,</span> at indexPath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">IndexPath</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSFetchedResultsChangeType</span><span class=\"token punctuation\">,</span> newIndexPath<span class=\"token punctuation\">:</span> <span class=\"token builtin\">IndexPath</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        onObjectChange<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>anObject <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">ObjectType</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>The shape of this version is pretty similar to what I had before.\nSo what did I change?</p>\n<ol>\n<li>I’m no longer passing in callbacks in the initializer.</li>\n<li>I created a <a href=\"https://developer.apple.com/documentation/combine/passthroughsubject\">PassthroughSubject</a> to replace each callback. A <a href=\"https://developer.apple.com/documentation/combine/subject\">Subject</a> in Combine can function as both a subscriber and a publisher, so it can both receive and publish objects. They’re often used like I’m using them here: as a bridge from imperative code to reactive code. A <code>PassthroughSubject</code> in particular is a simple pipe: when you send it objects, it sends them on to any active subscribers, then promptly forgets about them. A good subsitute for a callback.</li>\n<li>Instead of my fetched results controller delegate methods calling the callback functions, they now send equivalent messages to the appropriate subjects.</li>\n<li>Each subject is exposed via a property as a type-erased <a href=\"https://developer.apple.com/documentation/combine/anypublisher\">AnyPublisher</a>. I don’t want code that is using a <code>FetchedObjectList</code> to try to send objects to my subjects, so I mask their real types so they are exposed only as publishers.</li>\n</ol>\n<p>Now I can update my view controllers to use the new Combine-friendly fetched object lists:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> cancellables <span class=\"token operator\">=</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">AnyCancellable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n\n    toDoItemsList\n        <span class=\"token operator\">=</span> <span class=\"token function\">FetchedObjectList</span><span class=\"token punctuation\">(</span>\n            fetchRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ToDoItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            managedObjectContext<span class=\"token punctuation\">:</span> context\n        <span class=\"token punctuation\">)</span>\n\n    toDoItemsList<span class=\"token punctuation\">.</span>contentDidChange<span class=\"token punctuation\">.</span>sink <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n\n    toDoItemsList<span class=\"token punctuation\">.</span>objectDidChange<span class=\"token punctuation\">.</span>sink <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> toDoItem <span class=\"token keyword\">in</span>\n        <span class=\"token comment\">// find and update the cell</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>cancellables<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Honestly, I’m not sure if this version is an improvement over what I had before.\nIt’s a bit more verbose than the previous version, but I also now have a little extra complexity because I’m using Combine.\nUnlike the callbacks I used before, publishers don’t retain their subscribers, so Combine gives an <a href=\"https://developer.apple.com/documentation/combine/anycancellable\">AnyCancellable</a> when you create a subscriber, which you need to keep a strong reference to somewhere or your subscription will be cancelled.</p>\n<p>I’m handling this by keeping a set of cancellables on my view controller for all of my subscriptions, and using the <a href=\"https://developer.apple.com/documentation/combine/anycancellable/3333294-store\"><code>store(in:)</code></a> method on <code>AnyCancellable</code> to dump them all in there.\nWhen my view controller deinits, the set and all its contents will deinit as well and the subscriptions will be canceled.\nIt works, but it’s definitely more management than what I was doing before.</p>\n<p>So why did I do this?\nWell, this wasn’t the only part of my app that was starting to use Combine in interesting ways.\nI’d only just begun.\nThe benefits of using Combine compound the more your app uses it, and eventually a little bit of cancellable management seems like a fine price to pay.\nIn <a href=\"/observing-core-data-changes-with-combine/creating-pipelines/\">part two</a>, I’ll show how I embraced Combine even further to create pipelines for the data in my app.</p>",
          "fields": {
            "slug": "/observing-core-data-changes-with-combine/getting-started/"
          },
          "frontmatter": {
            "date": "2019-11-08T20:00:00.000Z",
            "photos": null,
            "pinned": null,
            "syndication": [
              "https://twitter.com/mjmoriarity/status/1193024362955231232"
            ],
            "templateKey": "blog-post",
            "title": "Getting Started with Combine and Core Data",
            "path": null
          }
        },
        {
          "excerpt": "<p>I’ve been working on porting a new iOS app to the Mac using Catalyst.\nPart of my app uses <code>UIActivityViewController</code> to support sharing projects you create in the app via a public URL.\nI had trouble finding good resources about how to make share menus first-class in Catalyst, so I thought I would write up what I found from digging through API docs.</p>\n",
          "html": "<p>I’ve been working on porting a new iOS app to the Mac using Catalyst.\nPart of my app uses <code>UIActivityViewController</code> to support sharing projects you create in the app via a public URL.\nI had trouble finding good resources about how to make share menus first-class in Catalyst, so I thought I would write up what I found from digging through API docs.</p>\n<!--more-->\n<h2 id=\"what-happens-if-you-do-nothing\"><a href=\"#what-happens-if-you-do-nothing\" aria-label=\"what happens if you do nothing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What happens if you do nothing?</h2>\n<p>Not to call them out, as I’m very happy that there’s an official Twitter for Mac app again, but it’s a good example of what happens if you just let Catalyst do its thing when you present a share sheet.</p>\n<p><img src=\"/media/2019/10/catalyst-share-no-changes.png\" alt=\"Twitter for Mac presenting a share menu at the bottom right corner of the window\"></p>\n<p><strong>Good:</strong> The UIKit <code>UIActivityViewController</code> was translated into the right Mac equivalent with <strong>no code changes.</strong>\nThat’s very cool, because the equivalent on macOS has a pretty different API.</p>\n<p><strong>The Bad:</strong> The menu showed up in possibly the most ridiculous place it could have appeared.</p>\n<p>This is totally fixable though.\nDepending on how your app is structured, you have a few different options for how to present your share sheet.</p>\n<h2 id=\"just-tell-uikit-where-to-put-it\"><a href=\"#just-tell-uikit-where-to-put-it\" aria-label=\"just tell uikit where to put it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Just tell UIKit where to put it</h2>\n<p>If you’re already supporting iPad for your app, you might already be doing the right thing here.</p>\n<p>When you present a <code>UIActivityViewController</code> on iPhone, it’s sufficient to just create it and present it, because it’s going to do a fullscreen modal and doesn’t need any more information to do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> sender<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.example.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> activityController <span class=\"token operator\">=</span> <span class=\"token function\">UIActivityViewController</span><span class=\"token punctuation\">(</span>activityItems<span class=\"token punctuation\">:</span> items<span class=\"token punctuation\">,</span>\n                                                      applicationActivities<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">present</span><span class=\"token punctuation\">(</span>activityController<span class=\"token punctuation\">,</span> animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But this actually doesn’t work on iPad.\nIf you try to do it, your app will throw an exception and crash!\nThe reason will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">UIPopoverPresentationController (&lt;UIPopoverPresentationController: 0x7fd60b5d3360&gt;) should have a non-nil sourceView or barButtonItem set before the presentation occurs.</code></pre></div>\n<p>On iPad, the activity view controller is trying to present as a popover, but UIKit doesn’t know where to show it.\nYou can tell it where by doing exactly what the exception is suggesting and setting a property on the popover presentation controller to indicate the source of the popover.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> sender<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.example.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> activityController <span class=\"token operator\">=</span> <span class=\"token function\">UIActivityViewController</span><span class=\"token punctuation\">(</span>activityItems<span class=\"token punctuation\">:</span> items<span class=\"token punctuation\">,</span>\n                                                      applicationActivities<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// if the action is sent from a bar button item</span>\n    activityController<span class=\"token punctuation\">.</span>popoverPresentationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>barButtonItem <span class=\"token operator\">=</span> sender <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">UIBarButtonItem</span>\n\n    <span class=\"token comment\">// if the action is sent from some other kind of UIView (a table cell or button)</span>\n    activityController<span class=\"token punctuation\">.</span>popoverPresentationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>sourceView <span class=\"token operator\">=</span> sender <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">UIView</span>\n\n    <span class=\"token function\">present</span><span class=\"token punctuation\">(</span>activityController<span class=\"token punctuation\">,</span> animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You may have to do a little more work than this to determine the source for your menu, but it should be doable.\nIf you do this, then your share menu should present from a much more sensible place in your app on macOS as well.</p>\n<p><img src=\"/media/2019/10/catalyst-share-source-view.png\" alt=\"Share menu presented from a source view\"></p>\n<p>This is a huge improvement, and it might be where you stop, but there are some more Mac-specific ways to incorporate a share menu into your app.</p>\n<h2 id=\"a-share-button-in-your-toolbar\"><a href=\"#a-share-button-in-your-toolbar\" aria-label=\"a share button in your toolbar permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A share button in your toolbar</h2>\n<p>It’s a pretty common pattern in Apple’s own macOS apps to include a share button on the right side of an app’s toolbar.\nIf your app supports sharing and includes a toolbar, I’d recommend you follow this pattern too.\nYour first instinct might be to just create an <code>NSToolbarItem</code> in your <code>NSToolbarDelegate</code> that calls the action to present your sharing menu:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">toolbar</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> toolbar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSToolbar</span><span class=\"token punctuation\">,</span> itemForItemIdentifier itemIdentifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSToolbarItem</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Identifier</span><span class=\"token punctuation\">,</span> willBeInsertedIntoToolbar flag<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NSToolbarItem</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> itemIdentifier <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>share<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token function\">NSToolbarItem</span><span class=\"token punctuation\">(</span>itemIdentifier<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>share<span class=\"token punctuation\">)</span>\n        item<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> <span class=\"token function\">UIImage</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"square.and.arrow.up\"</span><span class=\"token punctuation\">)</span>\n        item<span class=\"token punctuation\">.</span>isBordered <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        item<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> #<span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">RootViewController</span><span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> item\n    <span class=\"token comment\">// ...other items</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This results in an icon that looks a little bit off, but it has an even worse problem: where do you present your popover from?\n<code>NSToolbarItem</code> inherits from <code>NSObject</code>: it’s not a <code>UIBarButtonItem</code> nor is it a <code>UIView</code>.\nYour only other option would be to try to figure out the rect for the toolbar button and set that as the <code>sourceRect</code>, but let’s not go down that road.\nThere’s a better way to do this, and it’s new to both AppKit and Mac Catalyst in Catalina: <code>NSSharingServicePickerToolbarItem</code>.</p>\n<p>Let’s try swapping out our toolbar item for this new one:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">toolbar</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> toolbar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSToolbar</span><span class=\"token punctuation\">,</span> itemForItemIdentifier itemIdentifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSToolbarItem</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Identifier</span><span class=\"token punctuation\">,</span> willBeInsertedIntoToolbar flag<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NSToolbarItem</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> itemIdentifier <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>share<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token function\">NSSharingServicePickerToolbarItem</span><span class=\"token punctuation\">(</span>itemIdentifier<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>share<span class=\"token punctuation\">)</span>\n        item<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> #<span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">RootViewController</span><span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> item\n    <span class=\"token comment\">// ...other items</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Oh no! Now the icon looks right, but the button is always disabled.\nIt turns out <code>NSSharingServicePickerToolbarItem</code> doesn’t use the <code>action</code> property at all.\nInstead of performing an arbitrary action, this toolbar item will handle all the work if you just tell it how to get the items to share when it needs to.\nYou do this by setting <code>activityItemsConfiguration</code> to an object that implements the <code>UIActivityItemsConfigurationReading</code> protocol.</p>\n<blockquote>\n<p><strong>Aside:</strong> The <code>activityItemsConfiguration</code> property is specific to Mac Catalyst. When using AppKit, you provide a <code>delegate</code> to the toolbar item instead, which has a different API.</p>\n</blockquote>\n<p>UIKit provides a concrete implementation of this protocol called <code>UIActivityItemsConfiguration</code>, but I don’t think it will be useful in this situation.\nYou have to provide the items to share at initialization time, and most applications want to change what is shareable based on where the user is in the application, so let’s implement the protocol ourselves.\nI think the root view controller for your window is a good candidate to implement this, as it’s likely to have all the relevant state for where the user is in the app to know what should be shared.</p>\n<p>The implementation can be as simple as implementing one method:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">RootViewController</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIActivityItemsConfigurationReading</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> itemProvidersForActivityItemsConfiguration<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">NSItemProvider</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> project <span class=\"token operator\">=</span> selectedProject <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>project<span class=\"token punctuation\">.</span>itemProvider<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// then in the toolbar delegate</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">toolbar</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> toolbar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSToolbar</span><span class=\"token punctuation\">,</span> itemForItemIdentifier itemIdentifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSToolbarItem</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Identifier</span><span class=\"token punctuation\">,</span> willBeInsertedIntoToolbar flag<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NSToolbarItem</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> itemIdentifier <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>share<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token function\">NSSharingServicePickerToolbarItem</span><span class=\"token punctuation\">(</span>itemIdentifier<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>share<span class=\"token punctuation\">)</span>\n        item<span class=\"token punctuation\">.</span>activityItemsConfiguration <span class=\"token operator\">=</span> rootViewController\n        <span class=\"token keyword\">return</span> item\n    <span class=\"token comment\">// ...other items</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Each sharable item is represented by an <code>NSItemProvider</code>, so you’ll need a way to create one from the model objects you want to share (in this example, a <code>Project</code>).\nIf you’ve implemented drag-and-drop in table views or collection views, you’ve used NSItemProviders before.\nThey’re a way to capture the various representations of an object in an app such that it can be sent to another app, which can then use whichever representation is appropriate.</p>\n<p>It’s a bit frustrating that we need to use <code>NSItemProvider</code> for this, since we already had to implement either <code>UIActivityItemSource</code> or <code>UIActivityItemProvider</code> to be able to use <code>UIActivityViewController</code>.\nThe implementations for these two different APIs are similar, but not similar enough to make it trivial, at least if you have meaningful work you need to do to produce the sharable item.</p>\n<p>But this is what we must do, so let’s define a way to create an item provider from a project.\nIf you already have everything you need in memory or on disk, you can probably just use one of the initializers for <code>NSItemProvider</code> to provide the sharable data, and this will be pretty simple.\nIn my case, I need to send some data to a server before the app can know what URL to share, so the item provider needs to be set up to do that on demand.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Project</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> itemProvider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSItemProvider</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> itemProvider <span class=\"token operator\">=</span> <span class=\"token function\">NSItemProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        itemProvider<span class=\"token punctuation\">.</span><span class=\"token function\">registerObject</span><span class=\"token punctuation\">(</span>ofClass<span class=\"token punctuation\">:</span> <span class=\"token constant\">NSURL</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> completion <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">let</span> progress <span class=\"token operator\">=</span> <span class=\"token builtin\">Progress</span><span class=\"token punctuation\">.</span><span class=\"token function\">discreteProgress</span><span class=\"token punctuation\">(</span>totalUnitCount<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>publish <span class=\"token punctuation\">{</span> error <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">if</span> error <span class=\"token operator\">!=</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    progress<span class=\"token punctuation\">.</span>completedUnitCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>publishedURL <span class=\"token keyword\">as</span> <span class=\"token constant\">NSURL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword\">return</span> progress\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> itemProvider\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No matter how you implement it, your share button should be ready to go now.</p>\n<p><img src=\"/media/2019/10/catalyst-share-toolbar-item.png\" alt=\"Share toolbar button with menu in the right spot\"></p>\n<p>There’s a bonus to including a share button in your toolbar.\nIf you do still present a <code>UIActivityViewController</code> in your app without a source view or bar button item, the menu will now display near your toolbar button instead of at the bottom left corner of the window!\nThis is just a little bit of magic that UIKit does for Catalyst.</p>\n<h2 id=\"sharing-from-the-menu-bar\"><a href=\"#sharing-from-the-menu-bar\" aria-label=\"sharing from the menu bar permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sharing from the menu bar</h2>\n<p>I’ve <a href=\"/2018/06/750/\">written before</a> about how I think supporting the menu bar is part of what helps make a Mac app good.\nSo if we’ve already gone the extra mile to support sharing in our app from the toolbar, we should also support it in the menu bar!\nYour app’s main menu can be defined by overriding <code>buildMenu(with:)</code> in your application delegate, so let’s add a <code>Share…</code> command to our File menu:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">buildMenu</span><span class=\"token punctuation\">(</span>with builder<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIMenuBuilder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> builder<span class=\"token punctuation\">.</span>system <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>main <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">UIMenu</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>displayInline<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">UICommand</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Share…\"</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> #<span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">RootViewController</span><span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> atEndOfMenu<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/media/2019/10/catalyst-share-menu-command.png\" alt=\"A basic Share menu item in the File menu\"></p>\n<p>If you added a share button to your toolbar as described above, then when you choose the “Share…” item in the menu, your share menu will appear near your toolbar button.\nWhich is…okay, but not ideal.\nMac screens can be pretty large, so there might be a great deal of mouse travel needed to go from where the menu item was clicked to where the new menu showed up.</p>\n<p>If you look at some of the built-in apps on your Mac, you’ll notice that their File menus have a Share item that’s actually a submenu.\nThis is a nicer way to share from the menu bar, and if you’ve already done the work to support the sharing toolbar button, there isn’t much more you need to do to get a menu like this in your own app.</p>\n<p>First, let’s update our <code>UICommand</code> to include a special tag to indicate that it should be a share menu:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">buildMenu</span><span class=\"token punctuation\">(</span>with builder<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIMenuBuilder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> builder<span class=\"token punctuation\">.</span>system <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span>main <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">UIMenu</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>displayInline<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">UICommand</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Share\"</span><span class=\"token punctuation\">,</span>\n                  action<span class=\"token punctuation\">:</span> #<span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">RootViewController</span><span class=\"token punctuation\">.</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  propertyList<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UICommandTagShare</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> atEndOfMenu<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code>propertyList</code> on a <code>UICommand</code> allows arbitrary property list data to be associated with the command.\nUIKit provides <code>UICommandTagShare</code> as an opaque piece of data that tells it to make the command into a share menu.\nWhen you use this tag, the command’s action, though still required, will be ignored.</p>\n<p>If you run your app at this point, you might be a bit disappointed:</p>\n<p><img src=\"/media/2019/10/catalyst-share-menu-no-items.png\" alt=\"A Share submenu with no sharable items\"></p>\n<p>We need to specify what is currently shareable in our app.\nJust like <code>NSSharingServicePickerToolbarItem</code>, <code>UIResponder</code> also has an <code>activityItemsConfiguration</code> property, but it only seems to have an effect when used with your application delegate.</p>\n<p>You can set this property when you connect to the scene for your macOS UI in your scene delegate.\nFor instance, if you implemented <code>UIActivityItemsConfigurationReading</code> on your root view controller:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">scene</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> scene<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIScene</span><span class=\"token punctuation\">,</span> willConnectTo session<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UISceneSession</span><span class=\"token punctuation\">,</span> options connectionOptions<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIScene</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">ConnectionOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> scene <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">UIWindowScene</span>\n    <span class=\"token keyword\">let</span> rootViewController <span class=\"token operator\">=</span> window<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>rootViewController <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">RootViewController</span>\n    \n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">UIApplication</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span>delegate <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">AppDelegate</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>activityItemsConfiguration <span class=\"token operator\">=</span> rootViewController\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now when you run your app, if you are in a state where something in your app is shareable, you should see a useful Share menu in your File menu:</p>\n<p><img src=\"/media/2019/10/catalyst-share-submenu.png\" alt=\"A Share submenu in the File menu with destinations\"></p>\n<hr>\n<p>I hope this helps you make sharing in your iOS app feel first-class when running on macOS.\nWhile it’s a little bit of extra work to support correctly, I think it makes the experience a lot better for users of your app.</p>",
          "fields": {
            "slug": "/2019-10-18-share-menus-with-mac-catalyst/"
          },
          "frontmatter": {
            "date": "2019-10-18T20:00:00.000Z",
            "photos": null,
            "pinned": null,
            "syndication": [
              "https://twitter.com/mjmoriarity/status/1185288682372100096"
            ],
            "templateKey": "blog-post",
            "title": "Share Menus with Mac Catalyst",
            "path": null
          }
        },
        {
          "excerpt": "<p>When I started using <a href=\"https://www.netlify.com/\">Netlify</a> and <a href=\"https://www.gatsbyjs.org/\">Gatsby</a> for this site, I had to decide where to store media content that goes along with the site (mostly photos and other images).\nI could have just stored it in Git with the rest of the content and simplified my life a bit, but then I would be worrying about bloating up my Git repository with binary files. This can be an issue as a repository grows, since cloning a Git repository pulls down all of the history, even for files that were deleted in the current branch.\nSo instead, I started storing media content in <a href=\"https://git-lfs.github.com/\">Git LFS</a> using <a href=\"https://www.netlify.com/docs/large-media/\">Netlify Large Media</a>.</p>\n",
          "html": "<p>When I started using <a href=\"https://www.netlify.com/\">Netlify</a> and <a href=\"https://www.gatsbyjs.org/\">Gatsby</a> for this site, I had to decide where to store media content that goes along with the site (mostly photos and other images).\nI could have just stored it in Git with the rest of the content and simplified my life a bit, but then I would be worrying about bloating up my Git repository with binary files. This can be an issue as a repository grows, since cloning a Git repository pulls down all of the history, even for files that were deleted in the current branch.\nSo instead, I started storing media content in <a href=\"https://git-lfs.github.com/\">Git LFS</a> using <a href=\"https://www.netlify.com/docs/large-media/\">Netlify Large Media</a>.</p>\n<!--more-->\n<p>One of the ways I post content to this site is with <a href=\"https://ownyourgram.com/\">OwnYourGram</a>, which pulls the photos I post on <a href=\"https://www.instagram.com/\">Instagram</a> and cross-posts them to my own site as well.\nOwnYourGram uses <a href=\"https://www.w3.org/TR/micropub/\">Micropub</a> to post entries, which is great: I’ve already implemented a Micropub endpoint for this site so I can post small text posts from <a href=\"https://getdrafts.com/\">Drafts</a>.\nI just needed to update my Micropub implementation to be able to handle file uploads, which I had already supported in the previous version of my site.</p>\n<p>Not so fast, though: the old version uploaded files straight to S3, which was also hosting the site.\nNot too many moving parts there.\nThe new site is keeping images in Netlify Large Media, so now I needed to figure out how to programmatically add files to my Git repo that were actually stored in Netlify’s Git LFS storage.\nIt seemed like it would be a huge hassle, but it actually wasn’t as difficult as I expected.\nNow I’m going to tell you how you can do it!</p>\n<p>My code examples will be in JavaScript using the <a href=\"https://www.npmjs.com/package/github-api\">github-api</a> NPM package to interact with the GitHub API.\nThis package is a pretty thin wrapper around GitHub’s V3 REST API, though, so the examples should translate to other environments.\nI also use <a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a> for making HTTP requests to other endpoints, which you can substitute for your preferred way of making those requests.</p>\n<h2 id=\"storing-files-with-git-lfs\"><a href=\"#storing-files-with-git-lfs\" aria-label=\"storing files with git lfs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storing files with Git LFS</h2>\n<p>The GitHub API makes it pretty easy to write a single file to a repository with a commit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"src/pages/my-page.md\"</span><span class=\"token punctuation\">,</span>\n  pageContents<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Added my-page.md\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The contents of the page are stored as a blob in the repository, and it can be referenced in the tree from there.\nBut Git LFS’s whole purpose is to not store large files as blobs in the repository!\nInstead, Git LFS puts a “pointer file” in place of the actual file, and this pointer file references the actual file that is stored elsewhere.</p>\n<p>Storing a file in Git LFS will actually be a three-step process:</p>\n<ol>\n<li>Tell the Git LFS server about the file(s) we want to upload</li>\n<li>Upload the contents of each file</li>\n<li>Write pointer file(s) into the Git repository</li>\n</ol>\n<p>I’ll break down each of these steps one-by-one, so that by the end you’ll understand how to go from having a file you want to store to having it committed to your repo with Git LFS.</p>\n<h3 id=\"prerequisites\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h3>\n<p>Your Git LFS server can be independent from your Git repository.\nIn my case, GitHub is hosting my Git repository, but Netlify is hosting my large files with LFS.\nWhen you setup LFS for your repo, it should create a <code>.lfsconfig</code> file in the root of your repository which will tell the Git LFS client which server to use.</p>\n<p>You can add an extra step to your implementation of these uploads that involves reading this file to determine the right server.\nBut for my purposes, I hardcoded the server since I always want to upload files to the same repository.\nIt also simplifies authentication by not having to worry about the different strategies that different servers use.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// this is how Netlify Large Media handles auth</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"access-token\"</span>\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NETLIFY_TOKEN</span>\n\n<span class=\"token comment\">// replace with your LFS URL from .lfsconfig</span>\n<span class=\"token keyword\">const</span> lfsUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">@www.mattmoriarity.com/.netlify/large-media</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>I’ll reference this URL later when communicating with the LFS server.</p>\n<h3 id=\"initiating-the-transfer\"><a href=\"#initiating-the-transfer\" aria-label=\"initiating the transfer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initiating the transfer</h3>\n<p>The first thing we need to do to store a file in Git LFS is to start an upload operation.\nThis won’t involve transferring any of the actual bytes of the file yet: instead, it’s letting the Git LFS server know what files we want to store.\nThe server will then tell us how we can actually upload the content.</p>\n<p>Before we start, we need to know the OID and size of the file we’re going to upload.\nAssuming we have the file contents in an in-memory Buffer, we could do that like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"crypto\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sha256\"</span><span class=\"token punctuation\">)</span>\nhash<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> oid <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">byteLength</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The OID is a hash of the contents of the file.\nBoth Git and Git LFS are both examples of <a href=\"https://en.wikipedia.org/wiki/Content-addressable_storage\">content-addressable storage</a> systems, where we identify a piece of data by a hash of its contents.</p>\n<p>Now we can initiate the transfer by making a <code>POST</code> request to the <code>/objects/batch</code> endpoint on the Git LFS server, including a payload describing the operation we want to perform:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  operation<span class=\"token punctuation\">:</span> <span class=\"token string\">\"upload\"</span><span class=\"token punctuation\">,</span>\n  transfers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  objects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> oid<span class=\"token punctuation\">:</span> oid<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lfsUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/objects/batch</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    Accept<span class=\"token punctuation\">:</span> <span class=\"token string\">\"applications/vnd.git-lfs+json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"applications/vnd.git-lfs+json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> responseJson <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This request is basically us saying to the server: “I’m about to upload some files. How would you like me to do that?”\nWe’re only providing a single object, but if we have several files to upload, we could provide multiple in one batch.\nWe’ll receive a JSON payload that looks very similar to the one we sent, but with some useful new information from the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"transfer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"objects\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"oid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3ff49a2ca5eb17ed33f00dc470ace5d73515718cc90dd60797b608aae03efac7\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">118404</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"authenticated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"actions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"upload\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com/upload/to/somewhere\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"header\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            ...\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span> <span class=\"token number\">86400</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Much of the information is exactly what we provided to in the request body, but now the object includes an <code>actions</code> object.\nThe <code>upload</code> object within provides all of the information we will need to actually upload the file.\nWe’ll use that information in the next step.</p>\n<p>It’s possible for an object to be missing the <code>actions</code> key entirely:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"transfer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"objects\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"oid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3ff49a2ca5eb17ed33f00dc470ace5d73515718cc90dd60797b608aae03efac7\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">118404</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is good!\nIt means that the LFS server already knows about this file, and doesn’t need us to upload it again.\nIn this case, we can harmlessly skip the next step and go straight to writing the pointer file.</p>\n<h3 id=\"uploading-the-file\"><a href=\"#uploading-the-file\" aria-label=\"uploading the file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Uploading the file</h3>\n<p>If we do get an <code>upload</code> action back from the server, then we need to use it to actually upload the file.\nWe’ll use a PUT request for this, providing the raw contents of the file as the request body.\nWe’ll also be sure to include any headers that the server told us should be included.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> object <span class=\"token keyword\">of</span> responseJson<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>object<span class=\"token punctuation\">.</span>action <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>object<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span>upload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ignore already uploaded file</span>\n    <span class=\"token keyword\">continue</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> href<span class=\"token punctuation\">,</span> header <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">.</span>upload\n  header <span class=\"token operator\">=</span> header <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>href<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">:</span> buffer<span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/octet-stream\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>header<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>At this point, the LFS server has our file and is tracking it, so we just need to update our Git repository to refer to it.</p>\n<h3 id=\"writing-the-pointer-file-to-the-repository\"><a href=\"#writing-the-pointer-file-to-the-repository\" aria-label=\"writing the pointer file to the repository permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing the pointer file to the repository</h3>\n<p>A pointer file is a small text file we store in our Git repository that includes the OID and size of the file it’s meant to take the place of.\nIn this example, it might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">version https://git-lfs.github.com/spec/v1\noid sha256:3ff49a2ca5eb17ed33f00dc470ace5d73515718cc90dd60797b608aae03efac7\nsize 118404</code></pre></div>\n<p>It’s important that there is also a trailing newline character at the end of the file.\nIf you don’t include it, then when you check out your branch, Git will constantly think the files are modified.\nIt’s very frustrating to deal with: please don’t make my mistake!</p>\n<p>We can generate the pointer file in our code and write it to the Git repo in the location where we would otherwise store the file directly if we weren’t using LFS:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pointerFile <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">version https://git-lfs.github.com/spec/v1\noid sha256:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\nsize </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">await</span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"static/img/my-new-image.jpg\"</span><span class=\"token punctuation\">,</span>\n  pointerFile<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Added my-new-image.jpg\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>That’s it! If we pulled this branch onto our own machine after running this code, we would have our file at <code>static/img/my-new-image.jpg</code>, but without it actually being stored directly in our Git repository.</p>\n<hr>\n<p>I hope that this shatters some of the mystery around Git LFS and how it works.\nIt’s not much more difficult than working with just Git, and conceptually they are both very similar ways of storing data.</p>",
          "fields": {
            "slug": "/2019-04-25-uploading-media-with-git-lfs/"
          },
          "frontmatter": {
            "date": "2019-04-25T18:00:00.000Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Uploading Media with Git LFS",
            "path": null
          }
        },
        {
          "excerpt": "<p>On this site, I’m currently using both <a href=\"https://tailwindcss.com/\">Tailwind</a> and <a href=\"https://kyleamathews.github.io/typography.js/\">Typography.js</a> for styling. I really like both of these projects, but they do not interact very well with each other. I want to lay out why that is and the challenges I’ve been having with it.</p>\n",
          "html": "<p>On this site, I’m currently using both <a href=\"https://tailwindcss.com/\">Tailwind</a> and <a href=\"https://kyleamathews.github.io/typography.js/\">Typography.js</a> for styling. I really like both of these projects, but they do not interact very well with each other. I want to lay out why that is and the challenges I’ve been having with it.</p>\n<!--more-->\n<h2 id=\"why-do-i-use-these\"><a href=\"#why-do-i-use-these\" aria-label=\"why do i use these permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why do I use these?</h2>\n<h3 id=\"tailwind\"><a href=\"#tailwind\" aria-label=\"tailwind permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tailwind</h3>\n<p>I’ve been using Tailwind on many of my projects because, frankly, I’m not very good at CSS. Tailwind offers a bunch of things that lower the barrier to entry for me to make a good-looking web site/app: consistent color palettes, easy flexbox, speedy iteration. Especially when I was just getting back into web development, I needed this: plain CSS was beyond me, and heavier frameworks like Bulma or Bootstrap lacked the flexibility to create something outside-the-box.</p>\n<h3 id=\"typographyjs\"><a href=\"#typographyjs\" aria-label=\"typographyjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typography.js</h3>\n<p>Typography.js is a newer discovery for me. It creates a set of styles that define the typographic system for your page. It establishes sizes for headers and body text, sets fonts appropriately for each, and controls spacing between elements. And it does it all with <em>math</em>.</p>\n<p>This is really useful for web sites moreso than for web apps. For instance, the posts and pages on this site have a bunch of content written in Markdown, where it’s not easy or desirable to try to stick Tailwind utility classes on everything. For this content, I want to be able to just use bare HTML elements and have it come out looking good. Typography.js does an excellent job with this.</p>\n<h2 id=\"competitive-styling\"><a href=\"#competitive-styling\" aria-label=\"competitive styling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Competitive styling</h2>\n<p>Tailwind includes a pretty aggressive base style reset: no margins or padding for anything, for example, and all elements have their font sizes and stylings reset as well. This is a good thing: it means that Tailwind’s utility classes can stay concerned with adding styling and not worry about what things they have to take away as well. You’ll see later why this is important.</p>\n<p>When I tried to include Typography.js styles on a page with this reset, I got: nothing! Tailwind’s reset overrides every single thing Typography.js is trying to do.</p>\n<p>One solution to this is to just forego Tailwind’s CSS reset. Typography.js includes Normalize.css with it, which is also a large part of what Tailwind uses, so you’re not <em>that far</em> from where you want to be. That’s what I’ve done on this site. But there are still some issues:</p>\n<h4 id=\"spacing-is-all-wrong\"><a href=\"#spacing-is-all-wrong\" aria-label=\"spacing is all wrong permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spacing is all wrong</h4>\n<p>At least in its default configuration, Tailwind uses <code>rem</code> units for width, height, and spacing in its utility classes. When you’re just using Tailwind, this is great. But because Typography.js adjusts the <code>font-size</code> of the root <code>html</code> element, a <code>rem</code> is not the same size that Tailwind expects. On this site, body text is <code>20px</code>, so all of those sizes are a little bit bigger than they’re supposed to be. This also means that the gaps between sizes are a little too big, so it’s harder to get precision in the layout.</p>\n<p>I could certainly tweak the default config to adjust these values to compensate for different base font size, and that may be what I do. But part of the appeal of Tailwind is that the default config is already solid.</p>\n<h4 id=\"borders-and-lists-missing-resets\"><a href=\"#borders-and-lists-missing-resets\" aria-label=\"borders and lists missing resets permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Borders and lists: missing resets</h4>\n<p>There are a few cases where the resets in Tailwind’s base styles are needed for the utility classes to behave correctly. One case is borders. In Tailwind, you can add a border by applying two classes: one for the color, and one for width (and sides). So to add a 2px green border to the bottom of an element, it would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>border-green border-b-2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Without the correct reset, this won’t actually apply any border at all. This is because <a href=\"https://github.com/tailwindcss/tailwindcss/blob/master/css/preflight.css#L438\">Tailwind applies <code>border-style: solid</code> to all elements by default</a> and resets the <code>border-width</code> to 0. With that, the styles above are sufficient to apply a border. Without them, you actually have to do something much grosser:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>border-green border-0 border-b-2 border-solid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Notice that we have to both apply the correct <code>border-style</code> and reset the width to 0 on the other edges. I could probably fix this particular issue by just copying this reset into my own stylesheet.</p>\n<p>Lists (and other block elements) have a milder issue: Typography.js will have added a margin to them that may need to be reset to get the expected layout.</p>\n<h2 id=\"scoping-typographyjs\"><a href=\"#scoping-typographyjs\" aria-label=\"scoping typographyjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scoping Typography.js</h2>\n<p>What I really want is to be able to use Tailwind as-is for most of the site, and only have Typography.js styles for my blog content. So that’s what I tried to do.</p>\n<p>Typography.js doesn’t have a way to do this built-in: it applies styles to <code>html</code> and <code>body</code>. So I tried to just generate the styles, dump them in a file, and then use SASS to scope them to a <code>.typography</code> selector. I promoted <code>html</code> and <code>body</code> styles to the <code>.typography</code> element itself. And I put back Tailwind’s base styles.</p>\n<p>And it kind of worked. My Tailwind styles returned to normal now that the font-size wasn’t being messed with, and my <code>.typography</code> sections had the font I expected.</p>\n<p>But a bunch of things were wrong: the spacing between paragraphs and the size of headers was not right. It turns out this is the exact reverse problem with the base <code>font-size</code>. Typography.js defines the font size of heading elements in terms of <code>rem</code>s, so since the root font-size of the page is not the expected 20px, every heading was smaller than it was supposed to be. The same was true for margins.</p>\n<p>I tried switching the sizes to use <code>em</code>s, which would be relative to the right font size, but that also doesn’t work. The headings all have bottom margins, and defining those in <code>em</code>s makes them relative to the headings font size. Since those are all different, it’s hard to use a consistent value for margins when using <code>em</code>s.</p>\n<p>So I’ve abandoned this approach.</p>\n<hr>\n<p>As of now, I’m continuing to use these two together and tolerating some of the weirdness. I see two paths forward to improving the situation:</p>\n<ol>\n<li>Make some of the config and stylesheet changes I mention above to workaround some of the more painful incompatibilities.</li>\n<li>Stop using Tailwind, and write my own dang CSS. This could be an opportunity to explore some other approaches to styling in React/Gatsby.</li>\n</ol>",
          "fields": {
            "slug": "/2019-04-14-struggles-with-typography-js-and-tailwind/"
          },
          "frontmatter": {
            "date": "2019-04-14T16:00:00.000Z",
            "photos": null,
            "pinned": false,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Struggles with Typography.js and Tailwind",
            "path": null
          }
        },
        {
          "excerpt": "<p>If I had known how well Diablo III handled multiplayer on the Switch, I would have bought it two months ago when it came out. I say that even having played the game to death on PC.</p>\n<p>My house is a single Switch house. We’re not really interested in buying a whole extra console to be able to play games together, so my wife and I are often hunting for good couch co-op games that we can play together.</p>\n<p>Diablo III handles the mechanics of couch co-op better than any other Switch game I’ve tried. The Switch has an interesting system of multiple user profiles: each time you want to play a game, you choose which person you’re playing as, and it keeps your save data separate from others. So my list of Diablo characters are on my profile, and my wife’s are on her profile. Cool.</p>\n<p>In my experience, those profiles are usually totally isolated, but not with Diablo! If I want to play with her, I can pick up a controller, hit A to join the game, and it will prompt me for which other profile I want to play as. When I pick my profile, it shows my list of characters and I can choose one. And now we’re in the same game together, playing with the same characters we’ve been playing on our own separate profiles.</p>\n<p>I admit I had hoped this was how it would work when we got the game, but I hadn’t really expected it to be true. More Switch games that support co-op play should embrace this way of doing things. It made me so happy to have this kind of flexibility in how we play the game.</p>",
          "html": "<p>If I had known how well Diablo III handled multiplayer on the Switch, I would have bought it two months ago when it came out. I say that even having played the game to death on PC.</p>\n<p>My house is a single Switch house. We’re not really interested in buying a whole extra console to be able to play games together, so my wife and I are often hunting for good couch co-op games that we can play together.</p>\n<p>Diablo III handles the mechanics of couch co-op better than any other Switch game I’ve tried. The Switch has an interesting system of multiple user profiles: each time you want to play a game, you choose which person you’re playing as, and it keeps your save data separate from others. So my list of Diablo characters are on my profile, and my wife’s are on her profile. Cool.</p>\n<p>In my experience, those profiles are usually totally isolated, but not with Diablo! If I want to play with her, I can pick up a controller, hit A to join the game, and it will prompt me for which other profile I want to play as. When I pick my profile, it shows my list of characters and I can choose one. And now we’re in the same game together, playing with the same characters we’ve been playing on our own separate profiles.</p>\n<p>I admit I had hoped this was how it would work when we got the game, but I hadn’t really expected it to be true. More Switch games that support co-op play should embrace this way of doing things. It made me so happy to have this kind of flexibility in how we play the game.</p>",
          "fields": {
            "slug": "/2019/01/diablo-iii-for-switch-couch-co-op-done-right/"
          },
          "frontmatter": {
            "date": "2019-01-09T03:29:08.493Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Diablo III for Switch: Couch Co-op Done Right",
            "path": null
          }
        },
        {
          "excerpt": "<p>I’ve been microblogging here on <a href=\"https://mattmoriarity.com\">mattmoriarity.com</a> for the last year.\nI like posting short little thoughts (I don’t often have the attention span or the time for long posts like this one), and I’ve been using Twitter for that for over a decade now.\nBut these days, I prefer to post everything first to my own site and then <a href=\"https://indieweb.org/POSSE\">syndicate it to other places</a> like Twitter.</p>\n<p>When I set up this site, I used WordPress.\nIt was, and still is, the best free off-the-shelf tool for the job, with a community of plugins and people doing <a href=\"https://indieweb.org/\">IndieWeb</a> and microblogging things.\nI’ve used it successfully for this purpose for a year now, but recently I found myself wanting something different.\nI wanted a little more control over my microblogging workflow.</p>\n<p>At the same time, I’ve also recently become interested in <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> and other AWS offerings.\nAWS has a really generous <a href=\"https://aws.amazon.com/free/\">free tier</a>.\nAfter making a small project with Lambda and being impressed with how easy it was to build, I started to wonder if I could build my own blogging engine with Lambda.</p>\n<p>As a matter of fact, I could and I did! This site is now running on my new AWS-powered <a href=\"https://github.com/mjm/serverless-blog\">blogging engine</a>.\nI figure that it may be interesting to others how I went about assembling this all together, so here goes.</p>\n<h3 id=\"s3-for-static-site-hosting\"><a href=\"#s3-for-static-site-hosting\" aria-label=\"s3 for static site hosting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>S3 for static site hosting</h3>\n<p>Initially, my plan was to see how well I could render a website dynamically using Lambda functions.\nThis would have been your typical ordinary dynamic web site, just running in a serverless environment.</p>\n<p>The plan changed when I realized that S3 can be used to serve a static website.\nThere are two pieces that come together to make this a really good solution:</p>\n<ul>\n<li>If you name your S3 bucket by a domain name, you can use a CNAME DNS record to point the domain at that bucket’s contents.</li>\n<li>Beyond just serving files, S3 has explicit support for serving websites. You can configure your bucket to serve <code>index.html</code> files when requesting a directory and serve a particular page for errors.</li>\n</ul>\n<p>Beyond that, S3 is really cheap!\nIt’s not actually part of the AWS Free Tier, but that’s okay.\nThe normal costs of operating a website on S3 are minimal.\nIt costs less than $0.01 to serve 10,000 GET requests, so even for a high traffic site, you won’t be paying much.</p>\n<p>One thing you don’t get from S3 is HTTPS.\nS3 buckets serving websites only serve content over HTTP, but if you’re interested in serving your site over HTTPS, you have some options.</p>\n<p>One is AWS CloudFront, which puts your S3 bucket on a CDN protected by an AWS-issued certificate.\nYou lose some of the special website behavior from S3 like serving <code>index.html</code>, and propagating changes to the CDN can be slow, so I don’t like this option too much.\nI ended up using CloudFlare, which will run your site through its caching proxies and serve it over HTTPS for you.</p>\n<p>In addition to serving the generated web pages for the site, I also use S3 to store any uploaded photos, as well as the templates that are used to generate the pages.</p>\n<h3 id=\"dynamodb-for-document-storage\"><a href=\"#dynamodb-for-document-storage\" aria-label=\"dynamodb for document storage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DynamoDB for document storage</h3>\n<p>AWS has many different database offerings, but <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a> is the only one that is always part of the AWS Free Tier.\nEven if there were other options, though, DynamoDB is a pretty compelling choice for a lot of applications, including this one.\nDynamoDB is a NoSQL database with design goals for distributed scaling that <em>greatly</em> exceed what I need for storing the contents of a blog or two.\nIt does, however, let me store a bunch of documents that have somewhat unpredictable structures.</p>\n<p>I’m using DynamoDB to store a few different kinds of data:</p>\n<ul>\n<li>Some configuration data for the site: title, author, ping URLs, etc. This is all in one <code>config</code> document.</li>\n<li>Every static page on the site as its own document.</li>\n<li>Every post published to the site as its own document. Rather than choose my own schema for posts, I’ve decided to embrace <a href=\"http://microformats.org/wiki/Main_Page\">microformats</a> for how I store my posts. I use property names that match the ones specified for microformats, and I support storing any unknown properties so I can decide what to do with them later.</li>\n</ul>\n<p>The free tier of DynamoDB is limited in two different ways: storage capacity and throughput.\nYou get 25GB of storage for free, which is <em>way</em> more than I need, especially since media content is all stored directly in S3.</p>\n<p>Throughput is a more scarce resource.\nAWS measures throughput based on how much data you have to scan through when querying.\nUsing the free tier effectively requires giving some thought about how to query for exactly what you need, and if you’re used to RDBMS’s like I am, you might be surprised by the limitations of this.\nI’m hoping to write another post talking more about the specifics of how I’ve approached this.\nI think I’ve ended up with a pretty good solution that avoids querying for more data than is needed.</p>\n<h3 id=\"lambda-and-api-gateway\"><a href=\"#lambda-and-api-gateway\" aria-label=\"lambda and api gateway permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda and API Gateway</h3>\n<p>I use Lambda functions for two main groups of dynamic behavior:</p>\n<ul>\n<li>Adding or updating the content in the database using an HTTP API based on the <a href=\"https://www.w3.org/TR/micropub/\">Micropub</a> specification</li>\n<li>Generating the static content in response to database changes and uploading it to S3</li>\n</ul>\n<p>I really love using Lambda for this kind of work.\nIts model makes it really easy to focus in on the unique work that your code needs to do.\nIt’s been very pleasant to not give much thought to processes or HTTP servers or how to scale them.</p>\n<p>The pricing model is also very well suited to this use case.\nLambda functions are paid per request: if you’re not responding to a request, you’re not paying.\nSince I’m not blogging constantly, and because the site is statically generated, most of the time I’m not actually making requests.\nLambda is very efficient for this kind of workload.\nThe free tier gives you a whopping 1,000,000 requests for free, which is more than enough for how often I’ll be querying my API.</p>\n<p>Lambda functions alone do not an HTTP API make.\nSomething has to call those functions in response to HTTP requests, and that’s what API Gateway is for.\nAt its most basic, API Gateway lets you define which HTTP requests will be handled by which Lambda functions.\nIt also provides a proxy that constructs an event payload for your Lambda function that includes useful information from the HTTP request in a structured form.</p>\n<p>I also use another feature of API Gateway: custom authorizers.\nThis lets me define a particular lambda function for validating authorization tokens for my API.\nI use this to both ensure a valid token is provided and provide information to my other functions about who the token belongs to and what accesses it grants.\nOnce I have this authorizer, it’s easy to attach it to the different API endpoints that need to be protected.</p>\n<hr>\n<p>I’m very happy with how this engine has turned out, and I’m glad that I chose to run it on AWS.\nIt’s proving to be a very fun project, and one of the more cost-effective ways that I can blog the way I want to.</p>",
          "html": "<p>I’ve been microblogging here on <a href=\"https://mattmoriarity.com\">mattmoriarity.com</a> for the last year.\nI like posting short little thoughts (I don’t often have the attention span or the time for long posts like this one), and I’ve been using Twitter for that for over a decade now.\nBut these days, I prefer to post everything first to my own site and then <a href=\"https://indieweb.org/POSSE\">syndicate it to other places</a> like Twitter.</p>\n<p>When I set up this site, I used WordPress.\nIt was, and still is, the best free off-the-shelf tool for the job, with a community of plugins and people doing <a href=\"https://indieweb.org/\">IndieWeb</a> and microblogging things.\nI’ve used it successfully for this purpose for a year now, but recently I found myself wanting something different.\nI wanted a little more control over my microblogging workflow.</p>\n<p>At the same time, I’ve also recently become interested in <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> and other AWS offerings.\nAWS has a really generous <a href=\"https://aws.amazon.com/free/\">free tier</a>.\nAfter making a small project with Lambda and being impressed with how easy it was to build, I started to wonder if I could build my own blogging engine with Lambda.</p>\n<p>As a matter of fact, I could and I did! This site is now running on my new AWS-powered <a href=\"https://github.com/mjm/serverless-blog\">blogging engine</a>.\nI figure that it may be interesting to others how I went about assembling this all together, so here goes.</p>\n<h3 id=\"s3-for-static-site-hosting\"><a href=\"#s3-for-static-site-hosting\" aria-label=\"s3 for static site hosting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>S3 for static site hosting</h3>\n<p>Initially, my plan was to see how well I could render a website dynamically using Lambda functions.\nThis would have been your typical ordinary dynamic web site, just running in a serverless environment.</p>\n<p>The plan changed when I realized that S3 can be used to serve a static website.\nThere are two pieces that come together to make this a really good solution:</p>\n<ul>\n<li>If you name your S3 bucket by a domain name, you can use a CNAME DNS record to point the domain at that bucket’s contents.</li>\n<li>Beyond just serving files, S3 has explicit support for serving websites. You can configure your bucket to serve <code>index.html</code> files when requesting a directory and serve a particular page for errors.</li>\n</ul>\n<p>Beyond that, S3 is really cheap!\nIt’s not actually part of the AWS Free Tier, but that’s okay.\nThe normal costs of operating a website on S3 are minimal.\nIt costs less than $0.01 to serve 10,000 GET requests, so even for a high traffic site, you won’t be paying much.</p>\n<p>One thing you don’t get from S3 is HTTPS.\nS3 buckets serving websites only serve content over HTTP, but if you’re interested in serving your site over HTTPS, you have some options.</p>\n<p>One is AWS CloudFront, which puts your S3 bucket on a CDN protected by an AWS-issued certificate.\nYou lose some of the special website behavior from S3 like serving <code>index.html</code>, and propagating changes to the CDN can be slow, so I don’t like this option too much.\nI ended up using CloudFlare, which will run your site through its caching proxies and serve it over HTTPS for you.</p>\n<p>In addition to serving the generated web pages for the site, I also use S3 to store any uploaded photos, as well as the templates that are used to generate the pages.</p>\n<h3 id=\"dynamodb-for-document-storage\"><a href=\"#dynamodb-for-document-storage\" aria-label=\"dynamodb for document storage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DynamoDB for document storage</h3>\n<p>AWS has many different database offerings, but <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a> is the only one that is always part of the AWS Free Tier.\nEven if there were other options, though, DynamoDB is a pretty compelling choice for a lot of applications, including this one.\nDynamoDB is a NoSQL database with design goals for distributed scaling that <em>greatly</em> exceed what I need for storing the contents of a blog or two.\nIt does, however, let me store a bunch of documents that have somewhat unpredictable structures.</p>\n<p>I’m using DynamoDB to store a few different kinds of data:</p>\n<ul>\n<li>Some configuration data for the site: title, author, ping URLs, etc. This is all in one <code>config</code> document.</li>\n<li>Every static page on the site as its own document.</li>\n<li>Every post published to the site as its own document. Rather than choose my own schema for posts, I’ve decided to embrace <a href=\"http://microformats.org/wiki/Main_Page\">microformats</a> for how I store my posts. I use property names that match the ones specified for microformats, and I support storing any unknown properties so I can decide what to do with them later.</li>\n</ul>\n<p>The free tier of DynamoDB is limited in two different ways: storage capacity and throughput.\nYou get 25GB of storage for free, which is <em>way</em> more than I need, especially since media content is all stored directly in S3.</p>\n<p>Throughput is a more scarce resource.\nAWS measures throughput based on how much data you have to scan through when querying.\nUsing the free tier effectively requires giving some thought about how to query for exactly what you need, and if you’re used to RDBMS’s like I am, you might be surprised by the limitations of this.\nI’m hoping to write another post talking more about the specifics of how I’ve approached this.\nI think I’ve ended up with a pretty good solution that avoids querying for more data than is needed.</p>\n<h3 id=\"lambda-and-api-gateway\"><a href=\"#lambda-and-api-gateway\" aria-label=\"lambda and api gateway permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda and API Gateway</h3>\n<p>I use Lambda functions for two main groups of dynamic behavior:</p>\n<ul>\n<li>Adding or updating the content in the database using an HTTP API based on the <a href=\"https://www.w3.org/TR/micropub/\">Micropub</a> specification</li>\n<li>Generating the static content in response to database changes and uploading it to S3</li>\n</ul>\n<p>I really love using Lambda for this kind of work.\nIts model makes it really easy to focus in on the unique work that your code needs to do.\nIt’s been very pleasant to not give much thought to processes or HTTP servers or how to scale them.</p>\n<p>The pricing model is also very well suited to this use case.\nLambda functions are paid per request: if you’re not responding to a request, you’re not paying.\nSince I’m not blogging constantly, and because the site is statically generated, most of the time I’m not actually making requests.\nLambda is very efficient for this kind of workload.\nThe free tier gives you a whopping 1,000,000 requests for free, which is more than enough for how often I’ll be querying my API.</p>\n<p>Lambda functions alone do not an HTTP API make.\nSomething has to call those functions in response to HTTP requests, and that’s what API Gateway is for.\nAt its most basic, API Gateway lets you define which HTTP requests will be handled by which Lambda functions.\nIt also provides a proxy that constructs an event payload for your Lambda function that includes useful information from the HTTP request in a structured form.</p>\n<p>I also use another feature of API Gateway: custom authorizers.\nThis lets me define a particular lambda function for validating authorization tokens for my API.\nI use this to both ensure a valid token is provided and provide information to my other functions about who the token belongs to and what accesses it grants.\nOnce I have this authorizer, it’s easy to attach it to the different API endpoints that need to be protected.</p>\n<hr>\n<p>I’m very happy with how this engine has turned out, and I’m glad that I chose to run it on AWS.\nIt’s proving to be a very fun project, and one of the more cost-effective ways that I can blog the way I want to.</p>",
          "fields": {
            "slug": "/2018/12/microblogging-with-serverless/"
          },
          "frontmatter": {
            "date": "2018-12-22T03:48:46.205Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Microblogging with Serverless",
            "path": null
          }
        },
        {
          "excerpt": "<p>I’m currently working on a web project whose frontend is written in Elm. The project uses Stripe for handling payments. I ❤️ Stripe: it makes billing much easier for me and lets me mostly focus on the more unique aspects of the project.</p>\n<p>For now, I’m using Stripe Checkout, the simplest way to get payment details into Stripe. With Stripe Checkout, Stripe’s JavaScript creates the form for getting payment details from the user, and it shows that form in a modal window over your page. When the user submits the form, it talks to Stripe, gives you a token representing the payment details, and sends that to an endpoint on your server.</p>\n",
          "html": "<p>I’m currently working on a web project whose frontend is written in Elm. The project uses Stripe for handling payments. I ❤️ Stripe: it makes billing much easier for me and lets me mostly focus on the more unique aspects of the project.</p>\n<p>For now, I’m using Stripe Checkout, the simplest way to get payment details into Stripe. With Stripe Checkout, Stripe’s JavaScript creates the form for getting payment details from the user, and it shows that form in a modal window over your page. When the user submits the form, it talks to Stripe, gives you a token representing the payment details, and sends that to an endpoint on your server.</p>\n<!--more-->\n<h2 id=\"integrating-stripe-checkout-in-elm-018\"><a href=\"#integrating-stripe-checkout-in-elm-018\" aria-label=\"integrating stripe checkout in elm 018 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integrating Stripe Checkout in Elm 0.18</h2>\n<p>The simplest way to use Stripe Checkout is to make an HTML form and put a <code>script</code> tag inside it, with <code>data</code> attributes to customize the payment form. This is what I was doing with my app when I was using Elm 0.18:</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">stripeButton</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Html</span> <span class=\"token constant\">Message</span>\n<span class=\"token hvariable\">stripeButton</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Html.form</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">action</span> <span class=\"token string\">\"/subscribe\"</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">method</span> <span class=\"token string\">\"POST\"</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">node</span> <span class=\"token string\">\"script\"</span>\n            <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">src</span> <span class=\"token string\">\"https://checkout.stripe.com/checkout.js\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">class</span> <span class=\"token string\">\"stripe-button\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">attribute</span> <span class=\"token string\">\"data-key\"</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">stripeKey</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">attribute</span> <span class=\"token string\">\"data-name\"</span> <span class=\"token string\">\"My Product\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">attribute</span> <span class=\"token string\">\"data-description\"</span> <span class=\"token string\">\"Description of my product\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">attribute</span> <span class=\"token string\">\"data-amount\"</span> <span class=\"token string\">\"500\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">attribute</span> <span class=\"token string\">\"data-zip-code\"</span> <span class=\"token string\">\"true\"</span>\n            <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">button</span> <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">type_</span> <span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">class</span> <span class=\"token string\">\"button is-link is-medium\"</span> <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">icon</span> <span class=\"token constant\">Solid</span> <span class=\"token string\">\"credit-card\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">span</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">text</span> <span class=\"token string\">\"Subscribe for $5/mo\"</span> <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span></code></pre></div>\n<p>Using a custom HTML <code>node</code> to include a <code>script</code> tag in an Elm app is admittedly pretty dirty. But it’s relatively contained and it was working fine. The <code>button</code> there is actually a bit of a hack. Stripe Checkout will render its own button in the form, but it doesn’t look great with the rest of my UI, so there’s CSS to hide the Stripe button. As long as this button submits the same form, it’s just as good, and I can customize it to look how I want.</p>\n<h2 id=\"elm-019-ruins-the-fun\"><a href=\"#elm-019-ruins-the-fun\" aria-label=\"elm 019 ruins the fun permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elm 0.19 ruins the fun</h2>\n<p>Elm 0.19 is pretty disruptive: it changes a lot about how the language and many of its core libraries work. I went through the pretty gnarly upgrade process and thought I was in the clear. After all, one of the nice things about Elm is that once you get it compiling, you’ve usually caught most of your problems.</p>\n<p>In this one case, though, the upgrade had introduced a silent failure: my payment button didn’t work anymore! Instead of opening Stripe’s payment form, clicking the button just submitted the form (without any payment info), which then gave an error. Not what I wanted at all.</p>\n<p>I’ll spare you the hours of diagnosis and just tell you what the problem was: Elm 0.19 is <em>fundamentally incapable</em> of putting a <code>script</code> tag in HTML. A <code>script</code> node will get silently converted to a <code>p</code> node to prevent cross-site scripting attacks at the language level. Since the virtual-dom is generated with a Native module, and in Elm 0.19 third-party Native modules are no longer supported, there’s no way around this limitation. It’s a deliberate design decision. Even if we could work around it, we’d be fighting the future of the language, so instead let’s figure out a way to use Stripe Checkout without fighting Elm.</p>\n<h2 id=\"ports-to-the-rescue\"><a href=\"#ports-to-the-rescue\" aria-label=\"ports to the rescue permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ports to the rescue!</h2>\n<p>Elm does have a way to work with normal JavaScript code, and it’s pretty clever. It’s called “ports,” and it’s clever because it provides a way to send messages to and from JavaScript without breaking the functional nature and safety of Elm. Incoming messages from JavaScript become Messages which you handle in your <code>update</code> function, just like the ones your app creates to handle DOM events and HTTP responses. Outgoing messages are sent as commands, just like sending HTTP requests.</p>\n<p>To implement Stripe Checkout, we can declare our Main module as a <code>port module</code>, and declare two ports for our page:</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">port</span> <span class=\"token keyword\">module</span> <span class=\"token constant\">Page.Account.Main</span> <span class=\"token keyword\">exposing</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">main</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">{- imports here -}</span>\n\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">openPaymentForm</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Cmd</span> <span class=\"token hvariable\">msg</span>\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">createSubscription</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Encode.Value</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token hvariable\">msg</span></code></pre></div>\n<p><code>openPaymentForm</code> is an outgoing port, which will tell our JavaScript code to open the Stripe Checkout payment form. <code>createSubscription</code> is an incoming port: JavaScript code will send us messages through this port when the</p>\n<p>These are just declarations, though. Elm will synthesize implementations to handle the interaction with the JavaScript code. But even so, these are just pure functions as they are. They won’t do anything until we use them in our app.</p>\n<p>Before we can do that, we’ll need two messages in our Message type:</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Message</span>\n    <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">OpenPaymentForm</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">CreateSubscription</span> <span class=\"token constant\">Encode.Value</span>\n    <span class=\"token operator\">|</span> <span class=\"token operator\">...</span></code></pre></div>\n<p><code>OpenPaymentForm</code> gives our view a way to send the <code>openPaymentForm</code> command. <code>CreateSubscription</code> is the message we’ll receive with payment data from Stripe’s JavaScript.</p>\n<p>We now need to add cases for these messages to our <code>update</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">update</span> <span class=\"token hvariable\">message</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">case</span> <span class=\"token hvariable\">message</span> <span class=\"token keyword\">of</span>\n        <span class=\"token operator\">...</span>\n\n        <span class=\"token constant\">OpenPaymentForm</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">openPaymentForm</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n        <span class=\"token constant\">CreateSubscription</span> <span class=\"token hvariable\">value</span> <span class=\"token operator\">-></span>\n            <span class=\"token hvariable\">handleCreateSubscription</span> <span class=\"token hvariable\">value</span> <span class=\"token hvariable\">model</span>\n\n        <span class=\"token operator\">...</span></code></pre></div>\n<p>The <code>OpenPaymentForm</code> message just fires off the <code>openPaymentForm</code> command for our port. Handling the <code>CreateSubscription</code> message is more complex, mostly due to having to decode JSON data coming from JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">paymentDecoder</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Decoder</span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">paymentDecoder</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Decode.map2</span> <span class=\"token hvariable\">Tuple.pair</span>\n        <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"email\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Decode.field</span> <span class=\"token string\">\"id\"</span> <span class=\"token hvariable\">Decode.string</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token hvariable\">handleCreateSubscription</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Encode.Value</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Message</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">handleCreateSubscription</span> <span class=\"token hvariable\">value</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">case</span> <span class=\"token hvariable\">Decode.decodeValue</span> <span class=\"token hvariable\">paymentDecoder</span> <span class=\"token hvariable\">value</span> <span class=\"token keyword\">of</span>\n        <span class=\"token constant\">Ok</span> <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">email</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">token</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Http.send</span> <span class=\"token constant\">SubscriptionCreated</span>\n                <span class=\"token punctuation\">(</span><span class=\"token hvariable\">Request.User.createSubscription</span> <span class=\"token hvariable\">email</span> <span class=\"token hvariable\">token</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token constant\">Err</span> _ <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>We create a JSON decoder for the data we expect to receive from our <code>createSubscription</code> port. In this case, it’s a JSON object with two fields we care about: <code>id</code> and <code>email</code>. These are provided to us by Stripe Checkout. We decode these into a pair of values, and then send off an HTTP request to our backend server to create the subscription using the information we got from Stripe. The implementation of <code>Request.User.createSubscription</code> isn’t super important here: it’s normal Elm HTTP request code.</p>\n<p>Finally, in order to actually receive <code>CreateSubscription</code> messages, we need to add the port to our page’s subscriptions:</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">subscriptions</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">createSubscription</span> <span class=\"token constant\">CreateSubscription</span></code></pre></div>\n<p>Note that we provide a constructor function to the port to be able to build a message of our app’s message type from the provided JSON-encoded value coming in from the port.</p>\n<p>That’s all we have to do on the Elm side of things, but of course, nothing will happen from this until we actually write some JavaScript.</p>\n<h2 id=\"sprinkle-in-some-javascript\"><a href=\"#sprinkle-in-some-javascript\" aria-label=\"sprinkle in some javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sprinkle in some JavaScript</h2>\n<p>Stripe Checkout actually supports being used in two different ways. The first is what we did in Elm 0.18: create a form and embed a script inside it that will wire up some events for us. We could technically still use that here, but there’s a much cleaner way now that we’re in a position to write a little bit of JavaScript.</p>\n<p>Stripe Checkout provides a small JavaScript API to both open a payment form and define how to handle the generated payment token. Those two things correspond to the ports we declared for our Elm page, so let’s wire those together:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stripeKey <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;your stripe publishable key>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> flags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> stripeKey <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> Elm<span class=\"token punctuation\">.</span>Page<span class=\"token punctuation\">.</span>Account<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> flags <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> StripeCheckout<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token punctuation\">:</span> stripeKey<span class=\"token punctuation\">,</span>\n  locale<span class=\"token punctuation\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n  zipCode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>createSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>openPaymentForm<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  handler<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"My Product\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Description of my product\"</span><span class=\"token punctuation\">,</span>\n    amount<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Each port we declared in our Main module becomes a JavaScript object on <code>app.ports</code>. For a port going from Elm to JavaScript, like <code>openPaymentForm</code>, we can use the <code>subscribe</code> method in JavaScript to be notified when the command is sent from Elm. We use this to tell Stripe Checkout to open the payment form.</p>\n<p>For a port going from JavaScript to Elm, like <code>createSubscription</code>, we use the <code>send</code> method to feed data into the subscription on the Elm side. We use this in the <code>token</code> callback we provide to Stripe Checkout, which is called when the user submits the payment form. This gives us the data we need to be able to tell our Elm app to create a new subscription for the user.</p>\n<p>That’s it! That’s all the JavaScript we need to write for this.</p>\n<h2 id=\"is-this-an-improvement\"><a href=\"#is-this-an-improvement\" aria-label=\"is this an improvement permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is this an improvement?</h2>\n<p>We may have been forced to make this change due to new restrictions in Elm, but I think it’s worth asking: is our code better than when we started? Yes it is! Despite being more code, I think this Elm 0.19 solution is better than the Elm 0.18 version for a number of reasons:</p>\n<ul>\n<li>There is no DOM manipulation happening outside of Elm.</li>\n<li>All of our page interactions are going through Messages and Commands.</li>\n<li>Elm gets to handle the API request for subscribing, rather than having to use an HTML form submission.</li>\n<li>The separation of concerns is clearer, as the view code no longer needs to know how the payment form is opened or where to submit it.</li>\n</ul>\n<p>The main benefit here is consistency. Before this change, getting payment info was a huge special case in the app, implemented completely differently from things that should have been similar. Now the implementation is much more like any other interaction happening in the app. The small piece that needs to be different is tucked away in a little JavaScript behind a small façade. That’s a huge improvement.</p>\n<p>Having done it both ways, I would recommend using the ports approach even if you are still using Elm 0.18. It’s a better design that I think will serve you well, and it shouldn’t require any changes from what I’ve described here.</p>",
          "fields": {
            "slug": "/2018/10/1040/"
          },
          "frontmatter": {
            "date": "2018-10-07T20:30:16Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Using Stripe Checkout in an Elm 0.19 App",
            "path": null
          }
        },
        {
          "excerpt": "<p>Today, I finally fixed a longstanding issue with this website. I figured it would be a good idea to document it since I could not find this solution in any of my Googling to try to figure out what was wrong.</p>\n<p><a href=\"https://mattmoriarity.com\">mattmoriarity.com</a> is canonically served over SSL, but it’s supposed to have a redirect from plain HTTP URLs to the corresponding HTTPS URL. For a long time now, if you went to <a href=\"http://mattmoriarity.com\">http://mattmoriarity.com</a>, instead of getting redirected, you would get a nice big 403 Forbidden error from my Apache server.</p>\n",
          "html": "<p>Today, I finally fixed a longstanding issue with this website. I figured it would be a good idea to document it since I could not find this solution in any of my Googling to try to figure out what was wrong.</p>\n<p><a href=\"https://mattmoriarity.com\">mattmoriarity.com</a> is canonically served over SSL, but it’s supposed to have a redirect from plain HTTP URLs to the corresponding HTTPS URL. For a long time now, if you went to <a href=\"http://mattmoriarity.com\">http://mattmoriarity.com</a>, instead of getting redirected, you would get a nice big 403 Forbidden error from my Apache server.</p>\n<!--more-->\n<p>When this error occurred, an entry would appear in Apache’s error.log:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Sat Oct 06 16:43:20.907682 2018] [authz_core:error] [pid 5372] [client 123.123.123.123:12345] AH01630: client denied by server configuration: /var/www/html/</code></pre></div>\n<p>I banged my head against this for a while, because in theory, my virtual host for the site was configured as expected:</p>\n<div class=\"gatsby-highlight\" data-language=\"apacheconf\"><pre class=\"language-apacheconf\"><code class=\"language-apacheconf\"><span class=\"token directive-block tag\"><span class=\"token directive-block tag\"><span class=\"token punctuation\">&lt;</span>VirtualHost</span><span class=\"token directive-block-parameter attr-value\"> *<span class=\"token punctuation\">:</span>80</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token directive-inline property\">ServerName</span> mattmoriarity.com\n    <span class=\"token directive-inline property\">ServerAlias</span> www.mattmoriarity.com\n\n    <span class=\"token directive-inline property\">Redirect</span> permanent / https://mattmoriarity.com/\n<span class=\"token directive-block tag\"><span class=\"token directive-block tag\"><span class=\"token punctuation\">&lt;/</span>VirtualHost</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Searching the error code from the log above gave many results, but all of those results suggested one main cause: in Apache 2.4, the configuration directives for allowing and denying access to directories changed. For instance, <code>Allow from all</code> becomes <code>Require all granted</code> and so on. This was not my problem, though: all of my configuration was using the correct Apache 2.4 syntax.</p>\n<p>My best clue was the fact that the redirect worked fine if I accessed it from <code>www.mattmoriarity.com</code>. It only failed when I left off the <code>www.</code>. This was good: it means that the virtual host was working correctly when it matched. It just wasn’t matching when should.</p>\n<p>It turns out that the global configuration for Apache essentially forms its own virtual host. So I found the issue in a tiny file called <code>/etc/apache2/conf-enabled/fqdn.conf</code>, which contained only this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"apacheconf\"><pre class=\"language-apacheconf\"><code class=\"language-apacheconf\"><span class=\"token directive-inline property\">ServerName</span> mattmoriarity.com</code></pre></div>\n<p>By declaring the ServerName globally, the global virtual host was matching requests for the host <code>mattmoriarity.com</code> on port 80 instead of my declared virtual host. And now the error in the log made sense: <code>/var/www/html/</code> was the <code>DocumentRoot</code> declared globally.</p>\n<p>By removing this line of configuration, my declared virtual host now matched, and the redirect started working.</p>\n<p>Hopefully this helps someone else who finds themselves with the same problem!</p>",
          "fields": {
            "slug": "/2018/10/1031/"
          },
          "frontmatter": {
            "date": "2018-10-07T00:09:27Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "How I fixed my Apache SSL redirect",
            "path": null
          }
        },
        {
          "excerpt": "<p>At WWDC 2018, Apple announced a slew of new apps that were ported from iOS to macOS: News, Stocks, Home, and Voice Memos. These apps are interesting because Apple also announced that these apps are not using AppKit, the native framework that Apple provides for developing macOS applications. Instead, they use UIKit, the equivalent but more modern framework for iOS. Apple is working extending UIKit to be able to run on macOS and provide some translations from UIKit-style widgets to something that feels more natural on the Mac. In the future, <a href=\"https://9to5mac.com/2018/06/04/apple-gives-a-sneak-peek-at-multi-year-project-to-bring-uikit-ios-apps-to-the-mac/\">this will available to third-party apps</a> as well.</p>\n<p>Various people observed that this provides an interesting alternative to Electron. Many companies build their iOS apps using native UIKit, but rather than invest in an AppKit app for macOS, they’ll build one web app and then use Electron to package the web app as a desktop app for the various platforms they need to support. I’m not super fond of this approach for various reasons, and I do think that developers being able to port their iPad apps to macOS will be nicer than using Electron. That said, I want to talk about one particular thing that’s always irked me when using Electron apps and that I’m worried will also be an issue when developers start being able to port UIKit apps to macOS.</p>\n",
          "html": "<p>At WWDC 2018, Apple announced a slew of new apps that were ported from iOS to macOS: News, Stocks, Home, and Voice Memos. These apps are interesting because Apple also announced that these apps are not using AppKit, the native framework that Apple provides for developing macOS applications. Instead, they use UIKit, the equivalent but more modern framework for iOS. Apple is working extending UIKit to be able to run on macOS and provide some translations from UIKit-style widgets to something that feels more natural on the Mac. In the future, <a href=\"https://9to5mac.com/2018/06/04/apple-gives-a-sneak-peek-at-multi-year-project-to-bring-uikit-ios-apps-to-the-mac/\">this will available to third-party apps</a> as well.</p>\n<p>Various people observed that this provides an interesting alternative to Electron. Many companies build their iOS apps using native UIKit, but rather than invest in an AppKit app for macOS, they’ll build one web app and then use Electron to package the web app as a desktop app for the various platforms they need to support. I’m not super fond of this approach for various reasons, and I do think that developers being able to port their iPad apps to macOS will be nicer than using Electron. That said, I want to talk about one particular thing that’s always irked me when using Electron apps and that I’m worried will also be an issue when developers start being able to port UIKit apps to macOS.</p>\n<!--more-->\n<p>Native Mac apps care about the menu bar. Non-native apps don’t.</p>\n<h2 id=\"whats-so-great-about-the-menu-bar\"><a href=\"#whats-so-great-about-the-menu-bar\" aria-label=\"whats so great about the menu bar permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s so great about the menu bar?</h2>\n<p>The menu bar is an important part of a Mac app for a pretty simple reason: it makes apps easier to use. Apple’s <a href=\"https://developer.apple.com/design/human-interface-guidelines/macos/menus/menu-bar-menus/\">Human Interface Guidelines</a> explain this better than I can:</p>\n<blockquote>\n<p>People look in the menu bar when searching for app-specific commands, especially when using an app for the first time. Even when commands are available elsewhere in your app, it’s still a good idea to provide access to them via the menu bar. Doing so makes them easier for people to find, lets you assign keyboard shortcuts to them, and makes them more accessible to people using Full Keyboard Access. It can be appropriate to exclude infrequently used or advanced commands. Just keep in mind that you risk people missing commands that aren’t in the menu bar—even for experienced users.</p>\n</blockquote>\n<p>By having a menu bar that accurately captures the capabilities of your app, you make it easier for users to discover what your app can actually do. The menu bar provides a map of your app in a way that is much more explicit and clear than any other UI you have.</p>\n<h2 id=\"electron-apps-totally-have-a-menu-bar\"><a href=\"#electron-apps-totally-have-a-menu-bar\" aria-label=\"electron apps totally have a menu bar permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Electron apps totally have a menu bar!</h2>\n<p>This is technically correct. It’s not like they just have the application menu and nothing else, like some old Java apps would do. But every Electron app I’ve used has had a very minimal menu bar. Here’s a few examples from Electron apps I use.</p>\n<p><img src=\"/wp-content/uploads/2018/06/2018-06-07-09.47.09.gif\" alt=\"A tour through Slack&#x27;s menu bar\"></p>\n<p><img src=\"/wp-content/uploads/2018/06/2018-06-07-09.47.51.gif\" alt=\"A tour through WordPress.com&#x27;s menu bar\"></p>\n<p>There’s definitely some customization happening in these apps: their menu bars are not identical, and there are a few menu items specific to each app. They mostly involve navigation between various areas of the app. But compare this to a native Mac app like Calendar.</p>\n<p><img src=\"/wp-content/uploads/2018/06/2018-06-07-15.32.57.gif\" alt=\"A tour through Calendar&#x27;s menu bar\"></p>\n<p>Calendar has similarly few menus, but they contain most of the useful functionality that Calendar provides. The File, Edit, and View menus expose a bunch of functionality would be hard to discover otherwise.</p>\n<h2 id=\"why-does-this-happen\"><a href=\"#why-does-this-happen\" aria-label=\"why does this happen permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why does this happen?</h2>\n<p>Building a comprehensive set of menus for your Mac app is a non-trivial amount of engineering work. Even when you’re working with AppKit building a native app, nothing is going to force you to have amazing menus. I think we see better menus on AppKit apps for two reasons:</p>\n<ul>\n<li>Adding menu bar items is one of the most straightforward ways to add keyboard shortcuts to an AppKit app. While using menu items for keyboard shortcuts is also supported in Electron, most existing web apps probably have other ways to operate via the keyboard so that they work in a browser as well.</li>\n<li>Web apps expect to run in contexts where the menu bar is nonexistent (the browser) or where its importance is downplayed (Windows, Linux) in comparison to macOS. It’s just not as important to you if a large portion of your userbase won’t ever see it. AppKit apps have already embraced running on macOS and are therefore more likely to invest in blending in with the platform’s conventions.</li>\n</ul>\n<p>Both of these reasons are exactly why I’m worried that UIKit apps running on the Mac will also put minimal effort into their menus.</p>\n<ul>\n<li>UIKit already has <a href=\"https://developer.apple.com/documentation/uikit/uikeycommand\">an API for adding keyboard shortcuts</a> that has nothing to do with a menu bar.</li>\n<li>Apps using UIKit are expecting to run on iOS, which has no menu bar at all.</li>\n</ul>\n<p>I’m not trying to make a moral argument that developers are wrong or bad if they don’t give their apps good menus. It’s a tradeoff, and engineering is full of them. I just think that apps embracing the menu bar is part of what makes a Mac nice to use, and it makes me a little sad to imagine less and less apps caring about it going forward. Consider this my plea to developers building Mac apps, regardless of toolkit: please consider the menu bar.</p>",
          "fields": {
            "slug": "/2018/06/750/"
          },
          "frontmatter": {
            "date": "2018-06-07T15:54:32Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Mac Apps and the Menu Bar",
            "path": null
          }
        },
        {
          "excerpt": "<p>I get that we’re doing the whole automated releases of whatever’s passing tests and all, but release notes are important. People should be able to know what’s changing in your software.</p>\n<p>Make a process for building those notes and include them. <a href=\"https://keepachangelog.com/en/1.0.0/\">Keep a Changelog</a> seems to have a pretty good approach:</p>\n<p>Don’t merge in changes without updating the changelog as appropriate. Enforce this, either with code checks or with code review. If you do this, your release notes are already assembled when it’s time to release.</p>\n<p>There’s not much excuse for saying “bug fixes and performance improvements.” Tell us what’s actually happening.</p>",
          "html": "<p>I get that we’re doing the whole automated releases of whatever’s passing tests and all, but release notes are important. People should be able to know what’s changing in your software.</p>\n<p>Make a process for building those notes and include them. <a href=\"https://keepachangelog.com/en/1.0.0/\">Keep a Changelog</a> seems to have a pretty good approach:</p>\n<p>Don’t merge in changes without updating the changelog as appropriate. Enforce this, either with code checks or with code review. If you do this, your release notes are already assembled when it’s time to release.</p>\n<p>There’s not much excuse for saying “bug fixes and performance improvements.” Tell us what’s actually happening.</p>",
          "fields": {
            "slug": "/2018/02/208/"
          },
          "frontmatter": {
            "date": "2018-02-01T16:21:13Z",
            "photos": null,
            "pinned": null,
            "syndication": null,
            "templateKey": "blog-post",
            "title": "Bug fixes and performance improvements",
            "path": null
          }
        }
      ]
    }
  }
}
